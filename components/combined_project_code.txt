PROJECT STRUCTURE:
====================

FILE CONTENTS:
==============

    ├── FadeupAnimation.jsx
    ├── Heading.jsx
    ├── Hero.jsx
    ├── code.py
    ├── combined_project_code.txt
    ├── footer.jsx
    ├── header.jsx
    ├── loader.jsx
    ├── search-form.jsx
    ├── theme-provider.jsx

--- START OF FILE: FadeupAnimation.jsx ---

import React, { useEffect, useRef } from 'react';
import { motion, useInView, useAnimation } from 'framer-motion';

export default function FadeupAnimation({
    children,
    className = '',
    delay = 0.2,
    yOffset = 40,
    // blurAmount = 2,
}) {
    const ref = useRef(null);
    const isInView = useInView(ref, { once: true });
    const mainControls = useAnimation();

    useEffect(() => {
        if (isInView) {
            mainControls.start("visible");
        }
    }, [isInView, mainControls]);

    return (
        <div className={`relative ${className}`}>
            <motion.div

                variants={{
                    hidden: {
                        opacity: 0,
                        y: yOffset,
                    },
                    visible: {
                        opacity: 1,
                        y: 0,
                    },
                }}
                initial="hidden"
                whileInView={"visible"}
                viewport={{ once: true }}
                // animate={mainControls}
                transition={{
                    duration: 0.7,
                    delay: delay,
                    ease: [0.17, 0.55, 0.55, 1]
                    // ease: "easeInOut"
                }}
            >
                {children}
            </motion.div>
        </div>
    );
}


--- END OF FILE: FadeupAnimation.jsx ---

================================================================================


--- START OF FILE: Heading.jsx ---

import React from 'react';
import FadeupAnimation from './FadeUpAnimation';

export default function Heading({
    tag,
    title,
    subtitle,
    subtitle2,
    className = ''
}) {
    return (
        <div className={`text-center py-10 sm:py-16 ${className}`}>
            <FadeupAnimation>
                <div className="container mx-auto px-4">
                    {tag && (
                        <p className="text-white/90 text-sm tracking-tight font-semibold leading-tight md:text-lg max-w-xl mx-auto">
                            {tag}
                        </p>
                    )}
                    <h2 className="text-white font-bold text-4xl sm:text-5xl leading-tight my-7">
                        {title}
                    </h2>
                    {subtitle && (
                        <p className="text-white/90 text-sm tracking-tight font-semibold leading-tight md:text-lg max-w-xl mx-auto">
                            {subtitle}
                        </p>
                    )}
                    {subtitle2 && (
                        <p className="text-white/90 mt-4 text-sm tracking-tight font-semibold leading-tight md:text-lg max-w-md mx-auto">
                            {subtitle2}
                        </p>
                    )}
                </div>
            </FadeupAnimation>
        </div>
    );
}


--- END OF FILE: Heading.jsx ---

================================================================================


--- START OF FILE: Hero.jsx ---

"use client"
import React from 'react'
import { AnimatePresence, motion } from 'framer-motion'
import { Button } from './ui/button'

export default function Hero({ imgIdx }) {
    const images = [
        "/hero1.webp",
        "/hero2.webp",
        "/hero3.webp",
        "/hero4.webp",
    ]

    return (
        // Yeh main section ab static hai, isme animation nahi hai
        <section
            className="relative flex items-center justify-center min-h-[90vh] text-center text-white overflow-hidden"
        >
            {/* AnimatePresence ab sirf background image ko control karega */}
            <AnimatePresence>
                <motion.div
                    // Key zaroori hai taake AnimatePresence ko pata chale ke component change hua hai
                    key={imgIdx}

                    // Yeh div background image ban jayega
                    className="absolute inset-0"
                    style={{
                        backgroundImage: `url('${images[imgIdx]}')`,
                        backgroundSize: "cover",
                        backgroundPosition: "center",
                    }}

                    // Animation states
                    initial={{ opacity: 0, scale: 1.7 }} // Thoda sa zoomed-in aur transparent se shuru karein
                    animate={{ opacity: 1, scale: 1 }}     // Full opacity aur normal size par aayen
                    exit={{ opacity: 0, scale: 1.3 }}        // Fade out ho jayen

                    // Yahan humne opacity aur scale ke liye alag-alag duration set ki hai
                    transition={{
                        opacity: { duration: 1.8, ease: "easeInOut" }, // Opacity jaldi change hogi
                        scale: { duration: 5, ease: "linear", delay: 0.4 },   // Scale aahista change hoga
                    }}
                />
            </AnimatePresence>

            {/* Yeh black overlay hai jo background ke upar aayega */}
            <div className="absolute inset-0 bg-gradient-to-b from-transparent to-black z-10" />

            {/* Yeh content hai jo sabse upar rahega aur animate nahi hoga */}
            <div className="relative z-20 px-4 max-w-3xl">
                <div className="flex items-center gap-x-4 rounded-full border border-white/20 bg-black/30 px-5 py-3 shadow-lg backdrop-blur-2xl w-fit mb-4 mx-auto">
                    <span className="text-lg text-gray-100">Explore Place with Skyight</span>
                </div>

                <p className="mb-4 text-lg">No stress, just real experiences.</p>
                <h2 className="text-3xl md:text-5xl  mb-6">
                    Top places to visit, eat or experience –{" "}
                    <span className="text-primary">all in one spot.</span>
                </h2>
                <Button size="lg" className="rounded-full px-8 py-6 text-lg">
                    Let's Explore
                </Button>
            </div>
        </section>
    )
}

--- END OF FILE: Hero.jsx ---

================================================================================


--- START OF FILE: code.py ---

import os
import argparse

# --- Configuration ---
EXCLUDED_DIRS = {
    '.git',
    'node_modules',
    '__pycache__',
    'dist',
    'build',
    '.vscode',
    '.idea',
    'test-reports',
    'tests','reporters'
}

EXCLUDED_EXTENSIONS = {
    '.png', '.jpg', '.jpeg', '.gif', '.bmp', '.ico', '.svg',
    '.pdf', '.doc', '.docx', '.xls', '.xlsx',
    '.zip', '.rar', '.gz', '.tar',
    '.exe', '.dll', '.so', '.o', '.jar',
    '.mp4', '.mov', '.avi',
    '.mp3', '.wav','.test.js'
    '.lock'
}

def process_project(root_dir, output_file_path):
    """
    Project ko process karta hai: pehle structure banata hai, phir content.
    Yeh debugging messages bhi print karega.
    """
    print("--- SCRIPT STARTING ---")
    print(f"Project Directory: {os.path.abspath(root_dir)}")
    print(f"Excluded Directories: {EXCLUDED_DIRS}")

    # Pehle purani output file ko delete kar dein (agar maujood hai)
    if os.path.exists(output_file_path):
        os.remove(output_file_path)
        print(f"Deleted old output file: {output_file_path}")

    with open(output_file_path, 'w', encoding='utf-8') as output_file:
        # Step 1: Directory Structure
        output_file.write("PROJECT STRUCTURE:\n====================\n\n")
        
        # Step 2: Content
        output_file.write("FILE CONTENTS:\n==============\n\n")

        # os.walk se sab folders aur files ko process karein
        for root, dirs, files in os.walk(root_dir, topdown=True):
            
            # <<< DEBUGGING LINE >>>
            print(f"\nCurrently in directory: {root}")
            
            # Directories ko filter karein
            original_dirs = list(dirs) # Original list ko save karein
            dirs[:] = [d for d in dirs if d.lower() not in EXCLUDED_DIRS]
            
            # <<< DEBUGGING LINES >>>
            # Batayein kon se folders skip kiye gaye
            skipped_dirs = set(original_dirs) - set(dirs)
            if skipped_dirs:
                for skipped in skipped_dirs:
                    print(f"!!! SKIPPING Directory: {skipped} !!!")
            
            # Process files in the current valid directory
            # Pehle structure likhein
            level = root.replace(root_dir, '').count(os.sep)
            if level > 0:
                 output_file.write(f"{' ' * 4 * (level-1)}└── {os.path.basename(root)}/\n")
            
            sub_indent = ' ' * 4 * (level + 1)
            
            for f in sorted(files):
                 if not any(f.lower().endswith(ext) for ext in EXCLUDED_EXTENSIONS):
                    output_file.write(f"{sub_indent}├── {f}\n")
            
            # Phir content likhein
            for filename in sorted(files):
                if any(filename.lower().endswith(ext) for ext in EXCLUDED_EXTENSIONS):
                    continue

                file_path = os.path.join(root, filename)
                relative_path = os.path.relpath(file_path, root_dir)

                try:
                    with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                        content = f.read()
                    
                    output_file.write(f"\n--- START OF FILE: {relative_path} ---\n\n")
                    output_file.write(content)
                    output_file.write(f"\n\n--- END OF FILE: {relative_path} ---\n\n" + "="*80 + "\n\n")

                except Exception as e:
                    output_file.write(f"\n--- Could not read file: {relative_path} (Error: {e}) ---\n\n" + "="*80 + "\n\n")

def main():
    parser = argparse.ArgumentParser(description="Combine project files into a single text file with debugging.")
    parser.add_argument("project_dir", type=str, help="Project ka path.")
    parser.add_argument("output_file", type=str, nargs='?', default="combined_project_code.txt", help="Output file ka naam.")
    args = parser.parse_args()

    if not os.path.isdir(args.project_dir):
        print(f"Error: Directory not found at '{args.project_dir}'")
        return
    
    process_project(args.project_dir, args.output_file)
    print(f"\n--- SCRIPT FINISHED ---")
    print(f"Output saved to '{args.output_file}'")

if __name__ == "__main__":
    main()

--- END OF FILE: code.py ---

================================================================================


--- START OF FILE: combined_project_code.txt ---

PROJECT STRUCTURE:
====================

FILE CONTENTS:
==============

    ├── FadeupAnimation.jsx
    ├── Heading.jsx
    ├── Hero.jsx
    ├── code.py
    ├── combined_project_code.txt
    ├── footer.jsx
    ├── header.jsx
    ├── loader.jsx
    ├── search-form.jsx
    ├── theme-provider.jsx

--- START OF FILE: FadeupAnimation.jsx ---

import React, { useEffect, useRef } from 'react';
import { motion, useInView, useAnimation } from 'framer-motion';

export default function FadeupAnimation({
    children,
    className = '',
    delay = 0.2,
    yOffset = 40,
    // blurAmount = 2,
}) {
    const ref = useRef(null);
    const isInView = useInView(ref, { once: true });
    const mainControls = useAnimation();

    useEffect(() => {
        if (isInView) {
            mainControls.start("visible");
        }
    }, [isInView, mainControls]);

    return (
        <div className={`relative ${className}`}>
            <motion.div

                variants={{
                    hidden: {
                        opacity: 0,
                        y: yOffset,
                    },
                    visible: {
                        opacity: 1,
                        y: 0,
                    },
                }}
                initial="hidden"
                whileInView={"visible"}
                viewport={{ once: true }}
                // animate={mainControls}
                transition={{
                    duration: 0.7,
                    delay: delay,
                    ease: [0.17, 0.55, 0.55, 1]
                    // ease: "easeInOut"
                }}
            >
                {children}
            </motion.div>
        </div>
    );
}


--- END OF FILE: FadeupAnimation.jsx ---

================================================================================


--- START OF FILE: Heading.jsx ---

import React from 'react';
import FadeupAnimation from './FadeUpAnimation';

export default function Heading({
    tag,
    title,
    subtitle,
    subtitle2,
    className = ''
}) {
    return (
        <div className={`text-center py-10 sm:py-16 ${className}`}>
            <FadeupAnimation>
                <div className="container mx-auto px-4">
                    {tag && (
                        <p className="text-white/90 text-sm tracking-tight font-semibold leading-tight md:text-lg max-w-xl mx-auto">
                            {tag}
                        </p>
                    )}
                    <h2 className="text-white font-bold text-4xl sm:text-5xl leading-tight my-7">
                        {title}
                    </h2>
                    {subtitle && (
                        <p className="text-white/90 text-sm tracking-tight font-semibold leading-tight md:text-lg max-w-xl mx-auto">
                            {subtitle}
                        </p>
                    )}
                    {subtitle2 && (
                        <p className="text-white/90 mt-4 text-sm tracking-tight font-semibold leading-tight md:text-lg max-w-md mx-auto">
                            {subtitle2}
                        </p>
                    )}
                </div>
            </FadeupAnimation>
        </div>
    );
}


--- END OF FILE: Heading.jsx ---

================================================================================


--- START OF FILE: Hero.jsx ---

"use client"
import React from 'react'
import { AnimatePresence, motion } from 'framer-motion'
import { Button } from './ui/button'

export default function Hero({ imgIdx }) {
    const images = [
        "/hero1.webp",
        "/hero2.webp",
        "/hero3.webp",
        "/hero4.webp",
    ]

    return (
        // Yeh main section ab static hai, isme animation nahi hai
        <section
            className="relative flex items-center justify-center min-h-[90vh] text-center text-white overflow-hidden"
        >
            {/* AnimatePresence ab sirf background image ko control karega */}
            <AnimatePresence>
                <motion.div
                    // Key zaroori hai taake AnimatePresence ko pata chale ke component change hua hai
                    key={imgIdx}

                    // Yeh div background image ban jayega
                    className="absolute inset-0"
                    style={{
                        backgroundImage: `url('${images[imgIdx]}')`,
                        backgroundSize: "cover",
                        backgroundPosition: "center",
                    }}

                    // Animation states
                    initial={{ opacity: 0, scale: 1.7 }} // Thoda sa zoomed-in aur transparent se shuru karein
                    animate={{ opacity: 1, scale: 1 }}     // Full opacity aur normal size par aayen
                    exit={{ opacity: 0, scale: 1.3 }}        // Fade out ho jayen

                    // Yahan humne opacity aur scale ke liye alag-alag duration set ki hai
                    transition={{
                        opacity: { duration: 1.8, ease: "easeInOut" }, // Opacity jaldi change hogi
                        scale: { duration: 5, ease: "linear", delay: 0.4 },   // Scale aahista change hoga
                    }}
                />
            </AnimatePresence>

            {/* Yeh black overlay hai jo background ke upar aayega */}
            <div className="absolute inset-0 bg-gradient-to-b from-transparent to-black z-10" />

            {/* Yeh content hai jo sabse upar rahega aur animate nahi hoga */}
            <div className="relative z-20 px-4 max-w-3xl">
                <div className="flex items-center gap-x-4 rounded-full border border-white/20 bg-black/30 px-5 py-3 shadow-lg backdrop-blur-2xl w-fit mb-4 mx-auto">
                    <span className="text-lg text-gray-100">Explore Place with Skyight</span>
                </div>

                <p className="mb-4 text-lg">No stress, just real experiences.</p>
                <h2 className="text-3xl md:text-5xl  mb-6">
                    Top places to visit, eat or experience –{" "}
                    <span className="text-primary">all in one spot.</span>
                </h2>
                <Button size="lg" className="rounded-full px-8 py-6 text-lg">
                    Let's Explore
                </Button>
            </div>
        </section>
    )
}

--- END OF FILE: Hero.jsx ---

================================================================================


--- START OF FILE: code.py ---

import os
import argparse

# --- Configuration ---
EXCLUDED_DIRS = {
    '.git',
    'node_modules',
    '__pycache__',
    'dist',
    'build',
    '.vscode',
    '.idea',
    'test-reports',
    'tests','reporters'
}

EXCLUDED_EXTENSIONS = {
    '.png', '.jpg', '.jpeg', '.gif', '.bmp', '.ico', '.svg',
    '.pdf', '.doc', '.docx', '.xls', '.xlsx',
    '.zip', '.rar', '.gz', '.tar',
    '.exe', '.dll', '.so', '.o', '.jar',
    '.mp4', '.mov', '.avi',
    '.mp3', '.wav','.test.js'
    '.lock'
}

def process_project(root_dir, output_file_path):
    """
    Project ko process karta hai: pehle structure banata hai, phir content.
    Yeh debugging messages bhi print karega.
    """
    print("--- SCRIPT STARTING ---")
    print(f"Project Directory: {os.path.abspath(root_dir)}")
    print(f"Excluded Directories: {EXCLUDED_DIRS}")

    # Pehle purani output file ko delete kar dein (agar maujood hai)
    if os.path.exists(output_file_path):
        os.remove(output_file_path)
        print(f"Deleted old output file: {output_file_path}")

    with open(output_file_path, 'w', encoding='utf-8') as output_file:
        # Step 1: Directory Structure
        output_file.write("PROJECT STRUCTURE:\n====================\n\n")
        
        # Step 2: Content
        output_file.write("FILE CONTENTS:\n==============\n\n")

        # os.walk se sab folders aur files ko process karein
        for root, dirs, files in os.walk(root_dir, topdown=True):
            
            # <<< DEBUGGING LINE >>>
            print(f"\nCurrently in directory: {root}")
            
            # Directories ko filter karein
            original_dirs = list(dirs) # Original list ko save karein
            dirs[:] = [d for d in dirs if d.lower() not in EXCLUDED_DIRS]
            
            # <<< DEBUGGING LINES >>>
            # Batayein kon se folders skip kiye gaye
            skipped_dirs = set(original_dirs) - set(dirs)
            if skipped_dirs:
                for skipped in skipped_dirs:
                    print(f"!!! SKIPPING Directory: {skipped} !!!")
            
            # Process files in the current valid directory
            # Pehle structure likhein
            level = root.replace(root_dir, '').count(os.sep)
            if level > 0:
                 output_file.write(f"{' ' * 4 * (level-1)}└── {os.path.basename(root)}/\n")
            
            sub_indent = ' ' * 4 * (level + 1)
            
            for f in sorted(files):
                 if not any(f.lower().endswith(ext) for ext in EXCLUDED_EXTENSIONS):
                    output_file.write(f"{sub_indent}├── {f}\n")
            
            # Phir content likhein
            for filename in sorted(files):
                if any(filename.lower().endswith(ext) for ext in EXCLUDED_EXTENSIONS):
                    continue

                file_path = os.path.join(root, filename)
                relative_path = os.path.relpath(file_path, root_dir)

                try:
                    with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                        content = f.read()
                    
                    output_file.write(f"\n--- START OF FILE: {relative_path} ---\n\n")
                    output_file.write(content)
                    output_file.write(f"\n\n--- END OF FILE: {relative_path} ---\n\n" + "="*80 + "\n\n")

                except Exception as e:
                    output_file.write(f"\n--- Could not read file: {relative_path} (Error: {e}) ---\n\n" + "="*80 + "\n\n")

def main():
    parser = argparse.ArgumentParser(description="Combine project files into a single text file with debugging.")
    parser.add_argument("project_dir", type=str, help="Project ka path.")
    parser.add_argument("output_file", type=str, nargs='?', default="combined_project_code.txt", help="Output file ka naam.")
    args = parser.parse_args()

    if not os.path.isdir(args.project_dir):
        print(f"Error: Directory not found at '{args.project_dir}'")
        return
    
    process_project(args.project_dir, args.output_file)
    print(f"\n--- SCRIPT FINISHED ---")
    print(f"Output saved to '{args.output_file}'")

if __name__ == "__main__":
    main()

--- END OF FILE: combined_project_code.txt ---

================================================================================


--- START OF FILE: footer.jsx ---

import Link from "next/link"
import { Plane, Facebook, Twitter, Instagram, Mail, Phone, MapPin } from "lucide-react"

export function Footer() {
  return (
    <footer className="bg-muted/50 border-t">
      <div className="container mx-auto px-4 py-12">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
          {/* Company Info */}
          <div className="space-y-4">
            <Link href="/" className="flex items-center space-x-2">
              <Plane className="h-6 w-6 text-blue-600" />
              <span className="text-xl font-bold">Skyight</span>
            </Link>
            <p className="text-muted-foreground">
              Your trusted partner for finding the best flight deals worldwide.
              Book with confidence and travel with ease.
            </p>
            <div className="flex space-x-4">
              <Facebook className="h-5 w-5 text-muted-foreground hover:text-blue-600 cursor-pointer" />
              <Twitter className="h-5 w-5 text-muted-foreground hover:text-blue-600 cursor-pointer" />
              <Instagram className="h-5 w-5 text-muted-foreground hover:text-blue-600 cursor-pointer" />
            </div>
          </div>

          {/* Quick Links */}
          <div className="space-y-4">
            <h3 className="text-lg font-semibold">Quick Links</h3>
            <div className="space-y-2">
              <Link
                href="/flights"
                className="block text-muted-foreground hover:text-foreground"
              >
                Search Flights
              </Link>
              <Link
                href="/destinations"
                className="block text-muted-foreground hover:text-foreground"
              >
                Popular Destinations
              </Link>
              <Link
                href="/support"
                className="block text-muted-foreground hover:text-foreground"
              >
                Customer Support
              </Link>
              <Link
                href="/about"
                className="block text-muted-foreground hover:text-foreground"
              >
                About Us
              </Link>
            </div>
          </div>

          {/* Support */}
          <div className="space-y-4">
            <h3 className="text-lg font-semibold">Support</h3>
            <div className="space-y-2">
              <Link
                href="/help"
                className="block text-muted-foreground hover:text-foreground"
              >
                Help Center
              </Link>
              <Link
                href="/contact"
                className="block text-muted-foreground hover:text-foreground"
              >
                Contact Us
              </Link>
              <Link
                href="/terms"
                className="block text-muted-foreground hover:text-foreground"
              >
                Terms of Service
              </Link>
              <Link
                href="/privacy"
                className="block text-muted-foreground hover:text-foreground"
              >
                Privacy Policy
              </Link>
            </div>
          </div>

          {/* Contact Info */}
          <div className="space-y-4">
            <h3 className="text-lg font-semibold">Contact Info</h3>
            <div className="space-y-3">
              <div className="flex items-center space-x-2">
                <Phone className="h-4 w-4 text-muted-foreground" />
                <span className="text-muted-foreground">+1 (555) 123-4567</span>
              </div>
              <div className="flex items-center space-x-2">
                <Mail className="h-4 w-4 text-muted-foreground" />
                <span className="text-muted-foreground">
                  support@skyight.com
                </span>
              </div>
              <div className="flex items-center space-x-2">
                <MapPin className="h-4 w-4 text-muted-foreground" />
                <span className="text-muted-foreground">
                  123 Travel St, City, State 12345
                </span>
              </div>
            </div>
          </div>
        </div>

        <div className="border-t mt-8 pt-8 text-center text-muted-foreground">
          <p>&copy; {new Date().getFullYear()} Skyight. All rights reserved.</p>
        </div>
      </div>
    </footer>
  );
}


--- END OF FILE: footer.jsx ---

================================================================================


--- START OF FILE: header.jsx ---

"use client";
import Link from "next/link";
import Cookies from "js-cookie";
import toast from "react-hot-toast";
import { useTheme } from "next-themes";
import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { useRouter } from "nextjs-toploader/app";
import { Menu, Plane, Sun, Moon } from "lucide-react";
import { useDispatch, useSelector } from "react-redux";
import { Sheet, SheetContent, SheetTrigger } from "@/components/ui/sheet";

export function Header() {
  const router = useRouter();
  const dispatch = useDispatch();
  const { theme, setTheme } = useTheme();
  const [isOpen, setIsOpen] = useState(false);
  const [mounted, setMounted] = useState(false);
  const { userData } = useSelector((state) => state.persist);

  useEffect(() => {
    setMounted(true);
  }, []);

  const handleLogout = () => {
    dispatch({ type: "user/logout" });
    Cookies.remove("token"); // remove token cookie
    router.push("/login");
    toast.success("Logged out successfully");
  };

  const navigation = [
    { name: "Home", href: "/" },
    { name: "Bookings", href: "/bookings" },
    { name: "Support", href: "/support" },
    { name: "Destinations", href: "/destinations" },
  ];

  return (
    <header className="border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
      <div className="container px-4 mx-auto">
        <div className="flex items-center justify-between h-16">
          <Link href="/" className="flex items-center space-x-2">
            <Plane className="w-6 h-6 text-blue-600" />
            <span className="text-xl font-bold">Skyight</span>
          </Link>

          {/* Desktop Navigation */}
          {userData?.token && (
            <nav className="items-center hidden space-x-6 md:flex">
              {navigation.map((item) => (
                <Link
                  key={item.name}
                  href={item.href}
                  className="text-sm font-medium transition-colors hover:text-blue-600"
                >
                  {item.name}
                </Link>
              ))}
            </nav>
          )}

          <div className="flex items-center space-x-4">
            <Button
              variant="ghost"
              size="icon"
              onClick={() => setTheme(theme === "light" ? "dark" : "light")}
              disabled={!mounted}
            >
              {mounted && (
                <>
                  <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
                  <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
                </>
              )}
              <span className="sr-only">Toggle theme</span>
            </Button>

            <div className="items-center hidden space-x-2 md:flex">
              {userData?.token ? (
                <Button onClick={handleLogout} variant="outline">
                  Logout
                </Button>
              ) : (
                <>
                  <Link href="/login">
                    <Button variant="ghost">Login</Button>
                  </Link>
                  <Link href="/signup">
                    <Button>Sign Up</Button>
                  </Link>
                </>
              )}
            </div>

            {/* Mobile Menu */}
            <Sheet open={isOpen} onOpenChange={setIsOpen}>
              <SheetTrigger asChild className="md:hidden">
                <Button variant="ghost" size="icon">
                  <Menu className="w-5 h-5" />
                </Button>
              </SheetTrigger>
              <SheetContent side="right">
                <div className="flex flex-col mt-8 space-y-4">
                  {userData?.token && (
                    <>
                      {navigation.map((item) => (
                        <Link
                          key={item.name}
                          href={item.href}
                          className="text-lg font-medium"
                          onClick={() => setIsOpen(false)}
                        >
                          {item.name}
                        </Link>
                      ))}
                    </>
                  )}
                  <div className="pt-4 border-t">
                    {userData?.token ? (
                      <Button
                        variant="ghost"
                        className="justify-start w-full"
                        onClick={() => {
                          handleLogout();
                          setIsOpen(false);
                        }}
                      >
                        Logout
                      </Button>
                    ) : (
                      <>
                        <Link href="/login" onClick={() => setIsOpen(false)}>
                          <Button
                            variant="ghost"
                            className="justify-start w-full"
                          >
                            Login
                          </Button>
                        </Link>
                        <Link href="/signup" onClick={() => setIsOpen(false)}>
                          <Button className="justify-start w-full mt-2">
                            Sign Up
                          </Button>
                        </Link>
                      </>
                    )}
                  </div>
                </div>
              </SheetContent>
            </Sheet>
          </div>
        </div>
      </div>
    </header>
  );
}


--- END OF FILE: header.jsx ---

================================================================================


--- START OF FILE: loader.jsx ---

import React from "react";

const Loader = () => {
  return (
    <div className="flex items-center justify-center h-full">
      <div className="w-6 h-6 border-4 border-white rounded-full border-t-transparent animate-spin" />
    </div>
  );
};

export default Loader;


--- END OF FILE: loader.jsx ---

================================================================================


--- START OF FILE: search-form.jsx ---

"use client";
import React, { useState, useEffect } from "react";
import {
  Popover,
  PopoverTrigger,
  PopoverContent,
} from "@/components/ui/popover";
import { useForm } from "react-hook-form";
import airports from "@nwpr/airport-codes";
import { Plane, Users } from "lucide-react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import Dropdown from "@/components/ui/dropdown";
import { useRouter } from "nextjs-toploader/app";
import { Counter } from "@/components/ui/counter";
import { useDispatch, useSelector } from "react-redux";
import { Card, CardContent } from "@/components/ui/card";
import { getRoutes } from "@/_core/features/bookingSlice";
import { ToggleGroup, ToggleGroupItem } from "@/components/ui/toggle-group";

export default function SearchForm() {
  const router = useRouter();
  const dispatch = useDispatch();
  const [mounted, setMounted] = useState(false);
  const [tripType, setTripType] = useState("one-way");
  const [popoverOpen, setPopoverOpen] = useState(false);
  const { userData } = useSelector((state) => state.persist);
  const [processedRoutes, setProcessedRoutes] = useState([]);
  const { routes, loadingRoutes } = useSelector((state) => state.booking);

  useEffect(() => {
    setMounted(true);
  }, []);

  const {
    register,
    handleSubmit,
    watch,
    setValue,
    resetField,
    formState: { errors },
  } = useForm({
    defaultValues: {
      from: null,
      to: null,
      departure: "",
      returnDate: "",
      adults: 1,
      children: 0,
      infants: 0,
    },
  });
  const { from, to, adults, children, infants } = watch();

  // Ensure that form state stays in sync if you ever reset, etc.
  useEffect(() => {
    register("from", { required: "From is required" });
    register("to", { required: "To is required" });
  }, [register]);

  useEffect(() => {
    if (userData?.token) {
      dispatch(
        getRoutes({
          token: userData?.token,
          logoutHandler: () => {},
          secretToken: userData?.customer?.secretToken,
        })
      )
        .unwrap()
        .catch(() => {
          dispatch(
            getRoutes({
              token: userData?.token,
              logoutHandler: () => {},
              secretToken: userData?.customer?.secretToken,
            })
          );
        });
    }
  }, [dispatch, userData]);

  useEffect(() => {
    if (routes && routes.length > 0) {
      const enrichedRoutes = routes
        .map((route) => {
          // Find airport data for Origin and Destination
          const origin = airports.find((a) => a.iata === route.Origin);
          const dest = airports.find((a) => a.iata === route.Destination);

          // Create the new, enriched object structure
          return {
            Origin: {
              terminal: route.Origin,
              // Use the found name, or fallback to the terminal code if not found
              name: origin?.city || route.Origin,
            },
            Destination: {
              terminal: route.Destination,
              name: dest?.city || route.Destination,
            },
          };
        })
        .filter(Boolean); // Filter out any potential null/undefined entries

      setProcessedRoutes(enrichedRoutes);
    }
  }, [routes]);

  const departureOptions = React.useMemo(() => {
    // Create a unique list of origins to avoid duplicates in the dropdown
    const uniqueOrigins = [
      ...new Map(
        processedRoutes.map((item) => [item.Origin.terminal, item.Origin])
      ).values(),
    ];
    return uniqueOrigins.map((origin) => ({
      value: origin.terminal,
      label: `${origin.name} (${origin.terminal})`, // e.g., "Tehran (THR)"
    }));
  }, [processedRoutes]);

  const arrivalOptions = React.useMemo(
    () => (from) => {
      if (!from?.value) return [];
      return processedRoutes
        .filter(({ Origin }) => Origin.terminal === from.value)
        .map(({ Destination }) => ({
          value: Destination.terminal,
          label: `${Destination.name} (${Destination.terminal})`,
        }));
    },
    [processedRoutes]
  );

  const onSubmit = (data) => {
    if (tripType === "one-way") delete data.returnDate;
    const params = new URLSearchParams({
      from: data.from.value,
      to: data.to.value,
      departure: data.departure,
      ...(tripType === "return" && { returnDate: data.returnDate }),
      adults: data.adults.toString(),
      children: data.children.toString(),
      infants: data.infants.toString(),
      tripType,
    });
    router.push(`/flights?${params.toString()}`);
  };

  return (
    <Card className="max-w-4xl mx-auto">
      <CardContent className="p-6">
        <form onSubmit={handleSubmit(onSubmit)}>
          {/* Toggle + Passengers */}
          <div className="flex flex-col items-start mb-4 space-y-4 sm:flex-row sm:items-center sm:space-x-4 sm:space-y-0">
            <ToggleGroup
              type="single"
              value={tripType}
              onValueChange={(val) => setTripType(val || "one-way")}
              variant="blue"
              size="default"
            >
              {["one-way", "return"].map((val) => (
                <ToggleGroupItem key={val} value={val}>
                  {val === "one-way" ? "One‑way" : "Return"}
                </ToggleGroupItem>
              ))}
            </ToggleGroup>
            <div className="w-full sm:w-auto">
              <Popover open={popoverOpen} onOpenChange={setPopoverOpen}>
                <PopoverTrigger asChild>
                  <Button
                    variant="outline"
                    className="flex items-center w-full space-x-2 sm:w-auto"
                  >
                    <Users className="w-4 h-4" />
                    <span>
                      {adults} ADT - {children} CH - {infants} INF
                    </span>
                  </Button>
                </PopoverTrigger>
                <PopoverContent
                  side="bottom"
                  align="start"
                  sideOffset={8}
                  className="w-full sm:w-52"
                >
                  <Counter
                    label="Adults"
                    value={adults}
                    setValue={(v) =>
                      setValue("adults", v, { shouldValidate: true })
                    }
                    min={1}
                  />
                  <Counter
                    label="Children"
                    value={children}
                    setValue={(v) => setValue("children", v)}
                  />
                  <Counter
                    label="Infants"
                    value={infants}
                    setValue={(v) => setValue("infants", v)}
                  />
                </PopoverContent>
              </Popover>
            </div>
          </div>

          <div className="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-5">
            {/* From */}
            <div className="col-span-2 space-y-2 md:col-span-1 lg:col-span-1">
              <label className="text-sm font-medium text-muted-foreground">
                From
              </label>
              {mounted && (
                <Dropdown
                  value={from}
                  loading={loadingRoutes}
                  options={departureOptions}
                  onChange={(val) => {
                    resetField("to");
                    setValue("from", val, { shouldValidate: true });
                  }}
                  placeholder="Departure"
                />
              )}
              {errors.from && (
                <p className="text-sm text-red-500">{errors.from.message}</p>
              )}
            </div>

            {/* To */}
            <div className="col-span-2 space-y-2 md:col-span-1 lg:col-span-1">
              <label className="text-sm font-medium text-muted-foreground">
                To
              </label>
              {mounted && (
                <Dropdown
                  value={to}
                  disabled={!from}
                  options={arrivalOptions(from)}
                  onChange={(val) =>
                    setValue("to", val, { shouldValidate: true })
                  }
                  placeholder="Destination"
                />
              )}
              {errors.to && (
                <p className="text-sm text-red-500">{errors.to.message}</p>
              )}
            </div>

            {/* Departure */}
            <div className="col-span-2 space-y-2 md:col-span-1 lg:col-span-1">
              <label className="text-sm font-medium text-muted-foreground">
                Departure
              </label>
              <Input
                type="date"
                {...register("departure", {
                  required: "Departure date is required",
                })}
              />
              {errors.departure && (
                <p className="text-sm text-red-500">
                  {errors.departure.message}
                </p>
              )}
            </div>

            {/* Return */}
            {tripType === "return" && (
              <div className="col-span-2 space-y-2 md:col-span-1 lg:col-span-1">
                <label className="text-sm font-medium text-muted-foreground">
                  Return
                </label>
                <Input
                  type="date"
                  {...register("returnDate", {
                    required: "Return date is required",
                  })}
                />
                {errors.returnDate && (
                  <p className="text-sm text-red-500">
                    {errors.returnDate.message}
                  </p>
                )}
              </div>
            )}

            {/* Submit */}
            <div className="flex items-end col-span-2 md:col-span-2 lg:col-span-1">
              <Button
                type="submit"
                className="w-full bg-blue-600 hover:bg-blue-700"
              >
                <Plane className="w-4 h-4 mr-2" />
                Search Flights
              </Button>
            </div>
          </div>
        </form>
      </CardContent>
    </Card>
  );
}


--- END OF FILE: search-form.jsx ---

================================================================================


--- START OF FILE: theme-provider.jsx ---

"use client";
import { ThemeProvider as NextThemesProvider } from "next-themes";

export function ThemeProvider({ children, ...props }) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>;
}


--- END OF FILE: theme-provider.jsx ---

================================================================================

└── sections/
    └── ChromaGrid/
            ├── ChromaGrid.jsx

--- START OF FILE: sections\ChromaGrid\ChromaGrid.jsx ---

"use client";
import React, { useState } from "react";
import Image from "next/image";
import Heading from "@/components/Heading";

const ChromaGrid = () => {
    const destinations = [
        {
            name: "India",
            packages: "47 Trips Packages",
            image: "/india.jpg",
        },
        {
            name: "Italy",
            packages: "18 Trips Packages",
            image: "/italy.jpg",
        },
        {
            name: "Greece",
            packages: "11 Trips Packages",
            image: "/greece.jpg",
        },
        {
            name: "Portugal",
            packages: "14 Trips Packages",
            image: "/portugal.jpg",
        },
        {
            name: "Japan",
            packages: "10 Trips Packages",
            image: "/japan.jpg",
        },
        {
            name: "Peru",
            packages: "15 Trips Packages",
            image: "/maldive.jpg",
        },
        {
            name: "South Africa",
            packages: "14 Trips Packages",
            image: "/peru.jpg",
        },
        {
            name: "Europe",
            packages: "104 Trips Packages",
            image: "/europe.jpg",
        },
    ];

    // The default background image to show initially and on mouse leave
    const defaultBackgroundImage = "/4.jpg";

    // State to track the currently active background image
    const [activeBg, setActiveBg] = useState(defaultBackgroundImage);

    // Get a list of unique background images to prevent duplicate rendering
    const uniqueImages = [
        ...new Set([defaultBackgroundImage, ...destinations.map((d) => d.image)]),
    ];

    return (
        <div
            className="relative min-h-screen bg-black" // Fallback background
        >
            {/* Background Images Container */}
            <div className="absolute inset-0 z-0">
                {uniqueImages.map((img) => (
                    <div
                        key={img}
                        className="absolute inset-0 bg-cover bg-center transition-opacity duration-700 ease-in-out"
                    // style={{
                    //     backgroundImage: `url(${img})`,
                    //     opacity: activeBg === img ? 1 : 0, // Show only the active image
                    // }}
                    />
                ))}
            </div>

            {/* Gradient Overlay for Readability */}
            <div
                className="absolute inset-0 bg-black/50 z-10"
                style={{
                    backgroundImage: ` linear-gradient(rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.1))`,
                }}
            />

            {/* Content Container */}
            <div className="relative z-20 max-w-7xl mx-auto px-4 py-20">
                {/* Header */}
                <Heading title={"Where to next?"} tag={"Explore Destinations Country"} />

                {/* Destinations Grid */}
                <div
                    className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6"
                    // Reset to default background when mouse leaves the entire grid area
                    onMouseLeave={() => setActiveBg(defaultBackgroundImage)}
                >
                    {destinations.map((destination, index) => (
                        <div
                            key={index}
                            className="group relative h-64 rounded-2xl overflow-hidden cursor-pointer"
                            // Set the active background on hover
                            onMouseEnter={() => setActiveBg(destination.image)}
                        >
                            {/* Card Background Image */}
                            <div
                                className="absolute inset-0 bg-cover bg-center transition-all duration-500 filter grayscale group-hover:grayscale-0 group-hover:brightness-110"
                                style={{ backgroundImage: `url(${destination.image})` }}
                            />

                            {/* Card Dark Overlay */}
                            <div className="absolute inset-0 bg-black/40 group-hover:bg-black/20 transition-all duration-500" />

                            {/* Card Content */}
                            <div className="absolute inset-0 flex flex-col justify-end p-6">
                                <h3 className="text-white boucher uppercase font-bold text-3xl mb-2 transform transition-all duration-300 group-hover:translate-y-[-4px]">
                                    {destination.name}
                                </h3>
                                <div className="inline-flex">
                                    <span className="bg-white backdrop-blur-sm text-black sofia text-sm px-3 py-1 rounded-full border border-black transition-all duration-300 group-hover:bg-primary">
                                        {destination.packages}
                                    </span>
                                </div>
                            </div>

                            {/* Card Hover Effect Overlay */}
                            <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500" />
                        </div>
                    ))}
                </div>
            </div>
        </div>
    );
};

export default ChromaGrid;

--- END OF FILE: sections\ChromaGrid\ChromaGrid.jsx ---

================================================================================

    └── ContactUs/
            ├── ContactUs.jsx

--- START OF FILE: sections\ContactUs\ContactUs.jsx ---

import React, { useState, useEffect, useRef } from 'react';
import { motion, useInView, useAnimation } from 'framer-motion';
import { Phone, Mail, Send } from 'lucide-react';
import FadeupAnimation from '@/components/FadeupAnimation';


export default function ContactUs() {
    const [formData, setFormData] = useState({
        firstName: '', lastName: '', email: '', contactNumber: '', message: ''
    });
    const [agreed, setAgreed] = useState(false);

    const handleChange = (e) => {
        setFormData({ ...formData, [e.target.name]: e.target.value });
    };

    return (
        <div className="min-h-screen bg-black text-white py-16 px-4">
            <div className="max-w-7xl mx-auto">
                <div className="grid lg:grid-cols-2 gap-12 items-start">
                    {/* Left Side */}
                    <FadeupAnimation delay={0.1}>
                        <div className="relative">
                            <div className="bg-primary text-black rounded-3xl p-8">
                                <div className="mb-8">
                                    <h2 className="text-4xl font-bold mb-2">Skyight.</h2>
                                    <div className="w-12 h-1 bg-black"></div>
                                </div>
                                <p className="text-xl font-semibold mb-8">Keep travelling<br />all year round!</p>
                                <div className="flex gap-3">
                                    <button className="w-10 h-10 bg-black rounded-full flex items-center justify-center hover:scale-110 transition-transform">
                                        <svg className="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 24 24"><path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z" /></svg>
                                    </button>
                                    <button className="w-10 h-10 bg-black rounded-full flex items-center justify-center hover:scale-110 transition-transform">
                                        <svg className="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 24 24"><path d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z" /></svg>
                                    </button>
                                    <button className="w-10 h-10 bg-black rounded-full flex items-center justify-center hover:scale-110 transition-transform">
                                        <svg className="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 24 24"><path d="M19.59 6.69a4.83 4.83 0 01-3.77-4.25V2h-3.45v13.67a2.89 2.89 0 01-5.2 1.74 2.89 2.89 0 012.31-4.64 2.93 2.93 0 01.88.13V9.4a6.84 6.84 0 00-1-.05A6.33 6.33 0 005 20.1a6.34 6.34 0 0010.86-4.43v-7a8.16 8.16 0 004.77 1.52v-3.4a4.85 4.85 0 01-1-.1z" /></svg>
                                    </button>
                                    <button className="w-10 h-10 bg-black rounded-full flex items-center justify-center hover:scale-110 transition-transform">
                                        <svg className="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 24 24"><path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z" /></svg>
                                    </button>
                                </div>
                            </div>
                            <div className="mt-6 rounded-3xl overflow-hidden">
                                <Image src="https://images.unsplash.com/photo-1519046904884-53103b34b206?w=800&q=80" alt="Beach" className="w-full h-80 object-cover" />
                            </div>
                            <div className="mt-8 text-gray-500 text-sm space-y-2">
                                <p>© 2025. All rights reserved.</p>
                                <div className="flex gap-4"><button className="hover:text-white transition-colors">License</button><button className="hover:text-white transition-colors">Changelog</button><button className="hover:text-white transition-colors">StyleGuide</button></div>
                                <p>Designed by Flowcub Design</p><p>Powered by Webflow</p>
                            </div>
                        </div>
                    </FadeupAnimation>

                    {/* Right Side */}
                    <div>
                        <FadeupAnimation delay={0.2}><h1 className="text-5xl font-bold mb-4">Let's work together</h1></FadeupAnimation>
                        <FadeupAnimation delay={0.3}><p className="text-gray-400 mb-8">Drop me a message or reach out directly — I'll get back within a day.</p></FadeupAnimation>

                        <div className="grid grid-cols-2 gap-6 mb-8">
                            <FadeupAnimation delay={0.4}>
                                <div><div className="flex items-center gap-2 text-sm text-gray-400 mb-2"><Phone className="w-4 h-4" /><span>Mobile Number</span></div><p className="text-white">+ (38) 0292 7380 9925</p></div>
                            </FadeupAnimation>
                            <FadeupAnimation delay={0.5}>
                                <div><div className="flex items-center gap-2 text-sm text-gray-400 mb-2"><Mail className="w-4 h-4" /><span>Email Address</span></div><p className="text-white">yourmailaddress@gmail.com</p></div>
                            </FadeupAnimation>
                        </div>

                        <div className="space-y-6">
                            <div className="grid grid-cols-2 gap-6">
                                <FadeupAnimation delay={0.6}>
                                    <div><label className="block text-sm mb-2">First Name*</label><input type="text" name="firstName" placeholder="Rakesh" value={formData.firstName} onChange={handleChange} className="w-full bg-gray-900 border border-gray-800 rounded-xl px-4 py-3 text-white placeholder-gray-600 focus:outline-none focus:border-gray-700 transition-colors" /></div>
                                </FadeupAnimation>
                                <FadeupAnimation delay={0.7}>
                                    <div><label className="block text-sm mb-2">Last Name*</label><input type="text" name="lastName" placeholder="Patel" value={formData.lastName} onChange={handleChange} className="w-full bg-gray-900 border border-gray-800 rounded-xl px-4 py-3 text-white placeholder-gray-600 focus:outline-none focus:border-gray-700 transition-colors" /></div>
                                </FadeupAnimation>
                            </div>
                            <FadeupAnimation delay={0.8}>
                                <div><label className="block text-sm mb-2">Email Address*</label><input type="email" name="email" placeholder="Enter your email" value={formData.email} onChange={handleChange} className="w-full bg-gray-900 border border-gray-800 rounded-xl px-4 py-3 text-white placeholder-gray-600 focus:outline-none focus:border-gray-700 transition-colors" /></div>
                            </FadeupAnimation>
                            <FadeupAnimation delay={0.9}>
                                <div><label className="block text-sm mb-2">Contact number*</label><input type="tel" name="contactNumber" placeholder="IS 487 65665" value={formData.contactNumber} onChange={handleChange} className="w-full bg-gray-900 border border-gray-800 rounded-xl px-4 py-3 text-white placeholder-gray-600 focus:outline-none focus:border-gray-700 transition-colors" /></div>
                            </FadeupAnimation>
                            <FadeupAnimation delay={1.0}>
                                <div><label className="block text-sm mb-2">Write your Message</label><textarea name="message" placeholder="Write a message here..." value={formData.message} onChange={handleChange} rows="5" className="w-full bg-gray-900 border border-gray-800 rounded-xl px-4 py-3 text-white placeholder-gray-600 focus:outline-none focus:border-gray-700 transition-colors resize-none"></textarea></div>
                            </FadeupAnimation>
                            <FadeupAnimation delay={1.1}>
                                <button className="w-full bg-white text-black font-semibold py-4 rounded-full hover:bg-gray-200 transition-colors flex items-center justify-center gap-2 group">Send Message<div className="w-8 h-8 bg-black rounded-full flex items-center justify-center group-hover:scale-110 transition-transform"><Send className="w-4 h-4 text-white" /></div></button>
                            </FadeupAnimation>
                            <FadeupAnimation delay={1.2}>
                                <div className="flex items-center gap-2 text-sm text-gray-400"><input type="checkbox" id="privacy" checked={agreed} onChange={(e) => setAgreed(e.target.checked)} className="w-4 h-4 rounded border-gray-700 bg-gray-900" /><label htmlFor="privacy">I have read and accept the Privacy policy, and agree to join.</label></div>
                            </FadeupAnimation>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
}

--- END OF FILE: sections\ContactUs\ContactUs.jsx ---

================================================================================

    └── DestinationSlider/
            ├── CardSlider.jsx

--- START OF FILE: sections\DestinationSlider\CardSlider.jsx ---

// src/components/DestinationsCarousel.jsx
import React, { useRef } from 'react'; // Import useRef
// Swiper ke zaroori modules import karein
import { Swiper, SwiperSlide } from 'swiper/react';
import { Pagination } from 'swiper/modules';

// Swiper ki CSS import karein
import 'swiper/css';
import 'swiper/css/pagination';

import DestinationCard from './components/DestinationCard';
import Heading from '../../Heading';
import FadeupAnimation from '../../FadeUpAnimation';

// Sample Data (bilkul video jaisa)
const destinationsData = [
    {
        image: '/italy.jpg',
        tags: ['Night on board', '3D - Cairo Aswan', '3D - Yogyakarta'],
        country: 'Italy',
        duration: '9 Days - 7 Night',
        title: 'Cairo to Nile Cruise',
        rating: 4.4,
        reviews: '293',
        price: 3896,
    },
    {
        image: '/indonesia.jpg',
        tags: ['Night on board', '3D - Jakarta', '3D - Yogyakarta'],
        country: 'Indonesia',
        duration: '17 Days - 14 Night',
        title: 'Bali & Java',
        rating: 4.8,
        reviews: '4.2k',
        price: 8996,
    },
    {
        image: '/turkey.jpg',
        tags: ['Night on board', '3D - Istanbul', '3D - Yogyakarta'],
        country: 'Turkey',
        duration: '6 Days - 5 Night',
        title: 'Blue Mosque',
        rating: 4.6,
        reviews: '563',
        price: 4996,
    },
    {
        image: '/maldive.jpg',
        tags: ['Night on board', '3D - Maldives', '3D - Yogyakarta'],
        country: 'Maldives',
        duration: '5 Days - 4 Night',
        title: 'Maldives Huruval',
        rating: 4.9,
        reviews: '6.9k',
        price: 9587,
    },
    {
        image: '/korea.jpg',
        tags: ['Night on board', '3D - Seoul', '3D - Yogyakarta'],
        country: 'South Korea',
        duration: '11 Days - 8 Night',
        title: 'Korea Uncovered',
        rating: 3.9,
        reviews: '2k',
        price: 7679,
    },
    {
        image: '/india.jpg',
        tags: ['Night on board', '3D - Cairo Aswan', '3D - Yogyakarta'],
        country: 'Egypt',
        duration: '9 Days - 7 Night',
        title: 'Cairo to Nile Cruise',
        rating: 4.4,
        reviews: '293',
        price: 3896,
    },
    {
        image: '/indonesia.jpg',
        tags: ['Night on board', '3D - Jakarta', '3D - Yogyakarta'],
        country: 'Indonesia',
        duration: '17 Days - 14 Night',
        title: 'Bali & Java',
        rating: 4.8,
        reviews: '4.2k',
        price: 8996,
    },
    {
        image: '/turkey.jpg',
        tags: ['Night on board', '3D - Istanbul', '3D - Yogyakarta'],
        country: 'Turkey',
        duration: '6 Days - 5 Night',
        title: 'Blue Mosque',
        rating: 4.6,
        reviews: '563',
        price: 4996,
    }
];

export default function CardSlider() {
    // Create a ref for the pagination container
    const paginationRef = useRef(null);

    return (
        <div className="bg-black py-16">
            <div className=" max-md:px-4 mx-auto">
                <Heading title={" All Inclusive tour packages."} subtitle={"Travel from anywhere in India or worldwide. Pick a tour that fits you — starting right from your city."} />
                <Swiper
                    modules={[Pagination]}
                    // Responsive breakpoints
                    breakpoints={{
                        // Mobile
                        320: {
                            slidesPerView: 1.1,
                            spaceBetween: 15,
                        },
                        // Tablet
                        768: {
                            slidesPerView: 2.5,
                            spaceBetween: 20,
                        },
                        // Desktop
                        1024: {
                            slidesPerView: 3.7,
                            spaceBetween: 30,
                        },

                    }}
                    pagination={{
                        // Set clickable to true
                        clickable: true,
                        // Pass the ref to the 'el' property
                        el: paginationRef.current,
                    }}
                    // This is the key part:
                    // Use the onInit event to dynamically assign the pagination element
                    onInit={(swiper) => {
                        swiper.params.pagination.el = paginationRef.current;
                        swiper.pagination.init();
                        swiper.pagination.render();
                    }}
                    className="pb-12" // Pagination ke liye neeche space
                >
                    {/* <FadeupAnimation> */}
                    {destinationsData.map((destination, index) => (
                        <SwiperSlide key={index}>

                            <DestinationCard {...destination} />
                        </SwiperSlide>
                    ))}
                    {/* </FadeupAnimation> */}
                </Swiper>

                {/* Custom Pagination container with the ref */}
                <div ref={paginationRef} className="swiper-pagination-custom text-center mt-8"></div>
            </div>
        </div>
    );
}

--- END OF FILE: sections\DestinationSlider\CardSlider.jsx ---

================================================================================

        └── components/
                ├── DestinationCard.jsx

--- START OF FILE: sections\DestinationSlider\components\DestinationCard.jsx ---

// src/components/DestinationCard.jsx
import React from 'react';
import { ArrowRight } from 'lucide-react';

export default function DestinationCard({
    image,
    tags,
    country,
    duration,
    title,
    rating,
    reviews,
    price
}) {
    return (
        <div className="  overflow-hidden flex flex-col group">
            {/* Image Section */}
            <div className="relative">
                <img
                    src={image}
                    alt={title}
                    className="w-full rounded-2xl h-56 object-cover transition-transform duration-300 "
                />
                <div className="border-[1px] mt-1.5 rounded-lg relative border-gray-600  ">
                    {/* <div className='absolute z-10 inset-0 rounded-lg bg-gradient-to-r from-transparent via-transparent to-black/50'></div> */}
                    <div className='flex relative z-0 items-center justify-center gap-2 animate-slide w-fit'>

                        {tags.map((tag, index) => (
                            <span key={index} className=" whitespace-nowrap  text-white text-xs px-2 py-1  ">
                                {tag}
                            </span>
                        ))}
                    </div>
                </div>
            </div>

            {/* Content Section */}
            <div className="py-5 flex flex-col flex-grow">
                <p className="text-gray-400 text-sm mb-1">{country} • {duration}</p>
                <h3 className="text-white text-xl font-semibold mb-3">{title}</h3>

                <div className="flex items-center gap-2 mb-6">
                    <span className="bg-primary/30 text-primary font-bold text-sm px-2 py-1 rounded-md">{rating}</span>
                    <span className="text-gray-300">Wonderful</span>
                    <span className="text-gray-400 text-sm">({reviews} reviews)</span>
                </div>

                {/* Spacer to push price and button to bottom */}
                <div className="flex-grow" />

                <div className="flex justify-between items-end">
                    <div>
                        <span className="text-white text-2xl font-bold">${price.toLocaleString()}</span>
                        <span className="text-gray-400"> / per person</span>
                    </div>
                </div>

                <button className="
            mt-5 w-full text-white border border-gray-600 rounded-full py-3 px-6 
            flex justify-between items-center
            transition-colors duration-300 hover:bg-white hover:text-black
        ">
                    <span>Request Callback</span>
                    <ArrowRight size={20} />
                </button>
            </div>
        </div>
    );
}

--- END OF FILE: sections\DestinationSlider\components\DestinationCard.jsx ---

================================================================================

    └── FaqSection/
            ├── FaqSection.jsx

--- START OF FILE: sections\FaqSection\FaqSection.jsx ---

// src/components/FaqSection.jsx
import React from 'react';
import { ChevronRight } from 'lucide-react';
import FadeupAnimation from '@/components/FadeupAnimation';
import Heading from '@/components/Heading';

// Data ko component se bahar rakhein taake isay manage karna aasan ho.
// Aap is data ko API se bhi fetch kar sakte hain.
const faqData = [
    {
        id: 1,
        question: "How do I book a trip on Travio?",
        answer: "Just choose your destination, pick a package or experience, and follow the booking steps – it's quick and hassle-free."
    },
    {
        id: 2,
        question: "Can I customize my travel package?",
        answer: "Yes! Many of our packages can be personalized. You'll see options during checkout or you can contact us for help."
    },
    {
        id: 3,
        question: "Are the prices shown final?",
        answer: "Most prices are all-inclusive, but details are listed on each package page. No hidden fees – we keep it transparent."
    },
    {
        id: 4,
        question: "Do I need to create an account to book?",
        answer: "Nope. You can book as a guest, but having an account lets you track your trips and save your favorites."
    },
    {
        id: 5,
        question: "What if I need to cancel or change my booking?",
        answer: "Each trip has its own cancellation policy. You'll find it on the package page, or reach out to our support for help."
    },
    {
        id: 6,
        question: "Travio available for international planning?",
        answer: "Yes! Travio covers both domestic and international destinations – from India to Europe, Southeast Asia, and more."
    },
];

// Helper component for a single FAQ item
const FaqItem = ({ question, answer }) => (
    <div className="flex items-start gap-x-5">
        <div className="flex-shrink-0 w-8 h-8 bg-[#222] rounded-full flex items-center justify-center mt-1">
            <ChevronRight className="w-5 h-5 text-gray-400" />
        </div>
        <div>
            <h3 className="text-white text-lg font-semibold">{question}</h3>
            <p className="text-gray-400 mt-2 text-base leading-relaxed">{answer}</p>
        </div>
    </div>
);

// Main Section Component
export default function FaqSection() {
    return (
        <section className="bg-black py-24">
            <div className="container mx-auto px-4">
                {/* Section Title */}
                <Heading title={"Frequently Asked Questions"} subtitle={"Got questions? We’ve got answers."} />

                {/* Responsive Grid for FAQs */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-y-12 md:gap-x-16 max-w-6xl mx-auto">
                    {faqData.map((item, i) => (
                        <FadeupAnimation key={item.id} delay={i * 0.1}>

                            <FaqItem question={item.question} answer={item.answer} />
                        </FadeupAnimation>
                    ))}
                </div>
            </div>
        </section>
    );
}

--- END OF FILE: sections\FaqSection\FaqSection.jsx ---

================================================================================

    └── TeamSection/
            ├── TeamSection.jsx

--- START OF FILE: sections\TeamSection\TeamSection.jsx ---

// src/components/TeamSection.jsx

import React from 'react';
import { useCallback, useEffect, useMemo, useRef, useState, memo } from 'react';
import Heading from '../../Heading';
// CSS file import karna na bhoolein

// -------------------------------------------------------------------------
// LOGOLOOP COMPONENT (Aapka provide kiya hua code)
// ... (Yahan par aapka poora LogoLoop component ka code paste karein) ...
// Note: Main ne neeche iska code paste kar diya hai for completion.
// -------------------------------------------------------------------------

// Step 1: Ek single team member ka card banayein
const TeamMemberCard = ({ image, handwrittenText, name, title }) => (
    <div className="flex  flex-col md:flex-row items-center text-center gap-4">
        <div className="relative overflow-visible">
            <img
                src={image}
                alt={name}
                className="w-28 h-28 rounded-full object-cover"
            />
            <span className="
                absolute top-1 -left-2 damion whitespace-nowrap
                 text-primary text-base font-bold 
                transform -rotate-12 z-20
            ">
                {handwrittenText}
            </span>
        </div>
        <div>
            <h3 className="text-white text-lg font-semibold">{name}</h3>
            <p className="text-gray-400 text-sm">{title}</p>
        </div>
    </div>
);


// Step 2: Main section banayein
export default function TeamSection() {

    // Team members ka data
    const teamData = [
        {
            image: "https://images.unsplash.com/photo-1599566150163-29194dcaad36?q=80&w=2787&auto=format&fit=crop",
            handwrittenText: "The Jester Box",
            name: "Aarav Kapoor",
            title: "CTO & Founder",
        },
        {
            image: "https://images.unsplash.com/photo-1438761681033-6461ffad8d80?q=80&w=2940&auto=format&fit=crop",
            handwrittenText: "Summer Chaser",
            name: "Ananya Shah",
            title: "Vice President - Product",
        },
        {
            image: "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?q=80&w=2787&auto=format&fit=crop",
            handwrittenText: "The Code Whisperer",
            name: "Kabir Malhotra",
            title: "Head of Engineering",
        },
        {
            image: "https://images.unsplash.com/photo-1544005313-94ddf0286df2?q=80&w=2788&auto=format&fit=crop",
            handwrittenText: "Life of the Party",
            name: "Rohan Verma",
            title: "Vice President - Growth",
        },
        {
            image: "https://images.unsplash.com/photo-1580489944761-15a19d654956?q=80&w=2861&auto=format&fit=crop",
            handwrittenText: "The Style Maven",
            name: "Nisha Kapoor",
            title: "CEO & Co-Founder",
        },
        {
            image: "https://images.unsplash.com/photo-1500648767791-00dcc994a43e?q=80&w=2787&auto=format&fit=crop",
            handwrittenText: "The Strategist",
            name: "Vikram Singh",
            title: "Head of Operations",
        },
    ];

    // Data ko LogoLoop ke format me convert karein
    const teamLogos = useMemo(() =>
        teamData.map(member => ({
            // Hum 'node' property ka istemal karke custom component pass kar rahe hain
            node: <TeamMemberCard {...member} />
        })),
        []);

    return (
        <section className="bg-black text-white py-24 overflow-hidden">
            <div className="container mx-auto text-center px-4">
                {/* Top content */}

                <div className="inline-flex items-center gap-x-4 rounded-full border border-gray-700 bg-gray-900 px-4 py-2 ">
                    <span className="text-sm">In The Spotlight</span>
                    {/* Placeholder for logos */}
                    <div className="flex items-center gap-x-2">
                        <div className="w-4 h-4 bg-white rounded-sm"></div>
                        <div className="w-4 h-4 bg-white rounded-full"></div>
                    </div>
                </div>
                <Heading title={"Travel. Explore. Celebrate life."} subtitle={"At Travio, we keep travel simple, fun, and real. From where to go to what to do, we help you plan every step — all in one clean, easy space."} subtitle2={"We’re a small, passionate team who loves to travel and build helpful tools for others who do too."} />
            </div>

            {/* Team Members Infinite Scroller */}
            <LogoLoop
                logos={teamLogos}
                speed={60}
                pauseOnHover={false}
                fadeOut={false} // Fade effect nahi chahiye
                gap={80} // Cards ke beech me zyada space
            />

            {/* Yellow Bottom Bar */}
            <div className="bg-primary mt-20 text-customGray">
                <div className="container mx-auto px-4 py-6 grid grid-cols-2 md:grid-cols-4 gap-8 text-center">
                    <div className='flex items-center gap-3'><span className="font-semibold text-3xl">14</span> Years of Enjoying Life</div>
                    <div className='flex items-center gap-3'><span className="font-semibold text-3xl">24*7</span> in-trip assistance</div>
                    <div className='flex items-center gap-3'><span className="font-semibold text-3xl">10K+</span> Happy Travelers</div>
                    <div className='flex items-center gap-3'><span className="font-semibold text-3xl">250+</span> Packages across the world</div>
                    {/* <div className="col-span-2 md:col-span-1"><span className="font-bold text-2xl">98%</span> Positive Reviews</div> */}
                </div>
            </div>
        </section>
    );
}

// =============================================================
// PASTE YOUR FULL LOGOLOOP COMPONENT CODE HERE
// For demonstration, I'm pasting the code you provided.
// =============================================================
const ANIMATION_CONFIG = { SMOOTH_TAU: 0.25, MIN_COPIES: 2, COPY_HEADROOM: 2 };
const toCssLength = value => (typeof value === 'number' ? `${value}px` : (value ?? undefined));
const useResizeObserver = (callback, elements, dependencies) => {
    useEffect(() => {
        if (!window.ResizeObserver) {
            const handleResize = () => callback();
            window.addEventListener('resize', handleResize);
            callback();
            return () => window.removeEventListener('resize', handleResize);
        }
        const observers = elements.map(ref => {
            if (!ref.current) return null;
            const observer = new ResizeObserver(callback);
            observer.observe(ref.current);
            return observer;
        });
        callback();
        return () => { observers.forEach(observer => observer?.disconnect()); };
    }, dependencies);
};
const useImageLoader = (seqRef, onLoad, dependencies) => {
    useEffect(() => {
        const images = seqRef.current?.querySelectorAll('img') ?? [];
        if (images.length === 0) { onLoad(); return; }
        let remainingImages = images.length;
        const handleImageLoad = () => {
            remainingImages -= 1;
            if (remainingImages === 0) { onLoad(); }
        };
        images.forEach(img => {
            const htmlImg = img;
            if (htmlImg.complete) { handleImageLoad(); }
            else {
                htmlImg.addEventListener('load', handleImageLoad, { once: true });
                htmlImg.addEventListener('error', handleImageLoad, { once: true });
            }
        });
        return () => {
            images.forEach(img => {
                img.removeEventListener('load', handleImageLoad);
                img.removeEventListener('error', handleImageLoad);
            });
        };
    }, dependencies);
};
const useAnimationLoop = (trackRef, targetVelocity, seqWidth, isHovered, pauseOnHover) => {
    const rafRef = useRef(null);
    const lastTimestampRef = useRef(null);
    const offsetRef = useRef(0);
    const velocityRef = useRef(0);
    useEffect(() => {
        const track = trackRef.current;
        if (!track) return;
        if (seqWidth > 0) {
            offsetRef.current = ((offsetRef.current % seqWidth) + seqWidth) % seqWidth;
            track.style.transform = `translate3d(${-offsetRef.current}px, 0, 0)`;
        }
        const animate = timestamp => {
            if (lastTimestampRef.current === null) { lastTimestampRef.current = timestamp; }
            const deltaTime = Math.max(0, timestamp - lastTimestampRef.current) / 1000;
            lastTimestampRef.current = timestamp;
            const target = pauseOnHover && isHovered ? 0 : targetVelocity;
            const easingFactor = 1 - Math.exp(-deltaTime / ANIMATION_CONFIG.SMOOTH_TAU);
            velocityRef.current += (target - velocityRef.current) * easingFactor;
            if (seqWidth > 0) {
                let nextOffset = offsetRef.current + velocityRef.current * deltaTime;
                nextOffset = ((nextOffset % seqWidth) + seqWidth) % seqWidth;
                offsetRef.current = nextOffset;
                const translateX = -offsetRef.current;
                track.style.transform = `translate3d(${translateX}px, 0, 0)`;
            }
            rafRef.current = requestAnimationFrame(animate);
        };
        rafRef.current = requestAnimationFrame(animate);
        return () => {
            if (rafRef.current !== null) { cancelAnimationFrame(rafRef.current); rafRef.current = null; }
            lastTimestampRef.current = null;
        };
    }, [targetVelocity, seqWidth, isHovered, pauseOnHover, trackRef]);
};
export const LogoLoop = memo(({ logos, speed = 80, direction = 'left', width = '100%', logoHeight = 28, gap = 32, pauseOnHover = false, fadeOut = true, fadeOutColor = "white", scaleOnHover = true, ariaLabel = 'Partner logos', className, style }) => {
    const containerRef = useRef(null);
    const trackRef = useRef(null);
    const seqRef = useRef(null);
    const [seqWidth, setSeqWidth] = useState(0);
    const [copyCount, setCopyCount] = useState(ANIMATION_CONFIG.MIN_COPIES);
    const [isHovered, setIsHovered] = useState(false);
    const targetVelocity = useMemo(() => {
        const magnitude = Math.abs(speed);
        const directionMultiplier = direction === 'left' ? 1 : -1;
        const speedMultiplier = speed < 0 ? -1 : 1;
        return magnitude * directionMultiplier * speedMultiplier;
    }, [speed, direction]);
    const updateDimensions = useCallback(() => {
        const containerWidth = containerRef.current?.clientWidth ?? 0;
        const sequenceWidth = seqRef.current?.getBoundingClientRect?.()?.width ?? 0;
        if (sequenceWidth > 0) {
            setSeqWidth(Math.ceil(sequenceWidth));
            const copiesNeeded = Math.ceil(containerWidth / sequenceWidth) + ANIMATION_CONFIG.COPY_HEADROOM;
            setCopyCount(Math.max(ANIMATION_CONFIG.MIN_COPIES, copiesNeeded));
        }
    }, []);
    useResizeObserver(updateDimensions, [containerRef, seqRef], [logos, gap, logoHeight]);
    useImageLoader(seqRef, updateDimensions, [logos, gap, logoHeight]);
    useAnimationLoop(trackRef, targetVelocity, seqWidth, isHovered, pauseOnHover);
    const cssVariables = useMemo(() => ({ '--logoloop-gap': `${gap}px`, '--logoloop-logoHeight': `${logoHeight}px`, ...(fadeOutColor && { '--logoloop-fadeColor': fadeOutColor }) }), [gap, logoHeight, fadeOutColor]);
    const rootClassName = useMemo(() => ['logoloop', fadeOut && 'logoloop--fade', scaleOnHover && 'logoloop--scale-hover', className].filter(Boolean).join(' '), [fadeOut, scaleOnHover, className]);
    const handleMouseEnter = useCallback(() => { if (pauseOnHover) setIsHovered(true); }, [pauseOnHover]);
    const handleMouseLeave = useCallback(() => { if (pauseOnHover) setIsHovered(false); }, [pauseOnHover]);
    const renderLogoItem = useCallback((item, key) => {
        const isNodeItem = 'node' in item;
        const content = isNodeItem ? (<span className="logoloop__node" aria-hidden={!!item.href && !item.ariaLabel}>{item.node}</span>) : (<div className={`${item.bgColor} rounded-xl mt-8`}><img src={item.src} srcSet={item.srcSet} sizes={item.sizes} width={item.width} height={item.height} alt={item.alt ?? ''} title={item.title} loading="lazy" decoding="async" draggable={false} /></div>);
        const itemAriaLabel = isNodeItem ? (item.ariaLabel ?? item.title) : (item.alt ?? item.title);
        const itemContent = item.href ? (<a className="logoloop__link" href={item.href} aria-label={itemAriaLabel || 'logo link'} target="_blank" rel="noreferrer noopener">{content}</a>) : (content);
        return (<li className="logoloop__item" key={key} role="listitem">{itemContent}</li>);
    }, []);
    const logoLists = useMemo(() => Array.from({ length: copyCount }, (_, copyIndex) => (<ul className="logoloop__list" key={`copy-${copyIndex}`} role="list" aria-hidden={copyIndex > 0} ref={copyIndex === 0 ? seqRef : undefined}>{logos.map((item, itemIndex) => renderLogoItem(item, `${copyIndex}-${itemIndex}`))}</ul>)), [copyCount, logos, renderLogoItem]);
    const containerStyle = useMemo(() => ({ width: toCssLength(width) ?? '100%', ...cssVariables, ...style }), [width, cssVariables, style]);
    return (<div ref={containerRef} className={rootClassName} style={containerStyle} role="region" aria-label={ariaLabel} onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}><div className="logoloop__track" ref={trackRef}>{logoLists}</div></div>);
});
LogoLoop.displayName = 'LogoLoop';

--- END OF FILE: sections\TeamSection\TeamSection.jsx ---

================================================================================

    └── testimonials/
            ├── Testimonials.jsx
            ├── testimonials.css

--- START OF FILE: sections\testimonials\Testimonials.jsx ---

// src/components/TestimonialsCarousel.jsx
import React, { useRef } from 'react';
import { Swiper, SwiperSlide } from 'swiper/react';
import { Pagination } from 'swiper/modules';

// Swiper ki zaroori CSS files
import 'swiper/css';
import 'swiper/css/pagination';
// import "./testimonials.css"

import TestimonialCard from './components/TestimonialCard';
import Heading from '@/components/Heading';

// Sample Data
const testimonialsData = [
    {
        image: 'https://images.unsplash.com/photo-1528605248644-14dd04022da1?q=80&w=2940&auto=format&fit=crop',
        rating: 4.6,
        location: 'Maldives',
        duration: '8 Days - 7 Night',
        quote: 'Travio made travel planning effortless. Book dream trip in minutes!',
        userName: 'Riya Patel',
        userLocation: 'Bangalore',
        userAvatar: 'https://images.unsplash.com/photo-1494790108377-be9c29b29330?q=80&w=2787&auto=format&fit=crop',
    },
    {
        image: 'https://images.unsplash.com/photo-1590523277543-a94d2e4eb00b?q=80&w=3128&auto=format&fit=crop',
        rating: 4.6,
        location: 'Maldives',
        duration: '8 Days - 7 Night',
        quote: 'Planning our Maldives was great, fast and met our needs perfectly.',
        userName: 'Vikram',
        userLocation: 'Delhi, India',
        userAvatar: 'https://images.unsplash.com/photo-1500648767791-00dcc994a43e?q=80&w=2787&auto=format&fit=crop',
    },
    {
        image: 'https://images.unsplash.com/photo-1539635278303-d4002c07eae3?q=80&w=2940&auto=format&fit=crop',
        rating: 4.6,
        location: 'Indonesia',
        duration: '17 Days - 14 Night',
        quote: 'Planning my Bali trip with Travio was a breeze. Bookings and great tips!',
        userName: 'Priya Shah',
        userLocation: 'Mumbai',
        userAvatar: 'https://images.unsplash.com/photo-1580489944761-15a19d654956?q=80&w=2861&auto=format&fit=crop',
    },
    {
        image: 'https://images.unsplash.com/photo-1518684079-3c830dcef090?q=80&w=3087&auto=format&fit=crop',
        rating: 4.6,
        location: 'Dubai',
        duration: '7 Days - 6 Night',
        quote: 'Exploring options for Dubai was simple. They were personal and helpful.',
        userName: 'Ahmed K.',
        userLocation: 'Dubai',
        userAvatar: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?q=80&w=2787&auto=format&fit=crop',
    },
    {
        image: 'https://images.unsplash.com/photo-1540914214949-80811a43c490?q=80&w=2940&auto=format&fit=crop',
        rating: 4.8,
        location: 'Greece',
        duration: '10 Days - 9 Night',
        quote: 'Absolutely stunning views and perfectly organized. Highly recommend!',
        userName: 'Sophia',
        userLocation: 'Athens',
        userAvatar: 'https://images.unsplash.com/photo-1544005313-94ddf0286df2?q=80&w=2788&auto=format&fit=crop',
    },
];

export default function Testimonials() {
    const paginationRef = useRef(null);
    return (
        <section className="bg-black py-20">
            <Heading title={"Words from Our Adventurers"} subtitle={"See what our travelers have to say about their journeys with Travio."} />
            <div className="w-screen-lg mx-auto">
                <Swiper
                    modules={[Pagination]}
                    // Responsive breakpoints
                    breakpoints={{
                        320: { slidesPerView: 1.1 },
                        768: { slidesPerView: 2.2 },
                        1024: { slidesPerView: 3.2 },
                        1440: { slidesPerView: 4 }
                    }}
                    pagination={{
                        // Set clickable to true
                        clickable: true,
                        // Pass the ref to the 'el' property
                        el: paginationRef.current,
                    }}
                    // This is the key part:
                    // Use the onInit event to dynamically assign the pagination element
                    onInit={(swiper) => {
                        swiper.params.pagination.el = paginationRef.current;
                        swiper.pagination.init();
                        swiper.pagination.render();
                    }}
                    className="pb-16" // Pagination ke liye neeche space
                >
                    {testimonialsData.map((testimonial, index) => (
                        <SwiperSlide key={index} className="h-auto">
                            <TestimonialCard idx={index} {...testimonial} />
                        </SwiperSlide>
                    ))}
                </Swiper>

                {/* Custom Pagination container */}
                <div ref={paginationRef} className="swiper-pagination-custom text-center mt-8"></div>
            </div>
        </section>
    );
}

--- END OF FILE: sections\testimonials\Testimonials.jsx ---

================================================================================


--- START OF FILE: sections\testimonials\testimonials.css ---

/* src/index.css */

.swiper-slide {
  /* Yeh ensure karta hai ke cards ki height barabar ho */
  height: auto; 
}

.swiper-pagination-testimonials .swiper-pagination-bullet {
  width: 20px;
  height: 4px;
  border-radius: 2px;
  background-color: #444; /* Inactive dot color */
  opacity: 1;
  transition: background-color 0.3s, width 0.3s;
}

.swiper-pagination-testimonials .swiper-pagination-bullet-active {
  width: 40px;
  background-color: #fff; /* Active dot color */
}

--- END OF FILE: sections\testimonials\testimonials.css ---

================================================================================

        └── components/
                ├── StarRating.jsx
                ├── TestimonialCard.jsx

--- START OF FILE: sections\testimonials\components\StarRating.jsx ---

// src/components/StarRating.jsx
import React from 'react';
import { Star } from 'lucide-react';

// Yeh component 5 stars render karega
export default function StarRating() {
    return (
        <div className="flex items-center">
            {Array.from({ length: 5 }).map((_, index) => (
                <Star key={index} size={14} className="text-white fill-current" />
            ))}
        </div>
    );
}

--- END OF FILE: sections\testimonials\components\StarRating.jsx ---

================================================================================


--- START OF FILE: sections\testimonials\components\TestimonialCard.jsx ---

// src/components/TestimonialCard.jsx
import React from 'react';
import StarRating from './StarRating';

export default function TestimonialCard({
    idx,
    image,
    rating,
    location,
    duration,
    quote,
    userName,
    userLocation,
    userAvatar
}) {
    return (
        <div className={`flex flex-col h-full px-6 ${idx == 0 ? "md:border-r md:border-l" : "md:border-r"} h-full `}>
            {/* Image Section */}
            <div className="relative">
                <img
                    src={image}
                    alt={`Testimonial from ${userName}`}
                    className="w-full h-64 object-cover rounded-2xl "
                />
                <div className="
          absolute bottom-4 left-4 
          bg-green-600 text-white rounded-full 
          flex items-center gap-2 px-3 py-1.5
        ">
                    <span className="font-bold text-sm">{rating.toFixed(1)}</span>
                    <StarRating />
                </div>
            </div>

            {/* Content Section */}
            <div className="p-6 flex flex-col flex-grow">
                <p className="text-gray-400 text-sm mb-4">{location} · {duration}</p>

                <p className="text-white text-2xl font-semibold leading-snug mb-6">
                    "{quote}"
                </p>

                {/* Yeh div neeche ke content ko push karega */}
                <div className="flex-grow" />

                <div className="flex items-center gap-4 mt-auto">
                    <img
                        src={userAvatar}
                        alt={userName}
                        className="w-12 h-12 rounded-full object-cover"
                    />
                    <div>
                        <p className="text-white font-semibold">{userName}</p>
                        <p className="text-gray-400 text-sm">{userLocation}</p>
                    </div>
                </div>
            </div>
        </div >
    );
}

--- END OF FILE: sections\testimonials\components\TestimonialCard.jsx ---

================================================================================

    └── TopDestinations/
            ├── TopDestinations.jsx

--- START OF FILE: sections\TopDestinations\TopDestinations.jsx ---

"use client"
import React, { useState } from 'react';
import { ChevronRight, MapPin } from 'lucide-react';
import Heading from '../../Heading';
import FadeupAnimation from '../../FadeUpAnimation';

const mockDestinations = [
    {
        id: 1,
        name: 'Calangute',
        location: 'Goa',
        country: 'India',
        flag: '🇮🇳',
        price: 4895,
        image: 'https://images.unsplash.com/photo-1512343879784-a960bf40e7f2?w=800&q=80',
        categories: ['all', 'beach']
    },
    {
        id: 2,
        name: 'Mumbai',
        location: 'Maharashtra',
        country: 'India',
        flag: '🇮🇳',
        price: 1468,
        image: 'https://images.unsplash.com/photo-1566552881560-0be862a7c445?w=800&q=80',
        categories: ['all', 'culture']
    },
    {
        id: 3,
        name: 'Bangkok',
        location: 'Bangkok Province',
        country: 'Thailand',
        flag: '🇹🇭',
        price: 7466,
        image: 'https://images.unsplash.com/photo-1508009603885-50cf7c579365?w=800&q=80',
        categories: ['all', 'culture', 'family']
    },
    {
        id: 4,
        name: 'Bali',
        location: 'Bali',
        country: 'Indonesia',
        flag: '🇮🇩',
        price: 5299,
        image: 'https://images.unsplash.com/photo-1537996194471-e657df975ab4?w=800&q=80',
        categories: ['all', 'beach', 'culture']
    },
    {
        id: 5,
        name: 'Maldives',
        location: 'Malé',
        country: 'Maldives',
        flag: '🇲🇻',
        price: 12500,
        image: 'https://images.unsplash.com/photo-1514282401047-d79a71a590e8?w=800&q=80',
        categories: ['all', 'beach']
    },
    {
        id: 6,
        name: 'Swiss Alps',
        location: 'Zermatt',
        country: 'Switzerland',
        flag: '🇨🇭',
        price: 8900,
        image: 'https://images.unsplash.com/photo-1531366936337-7c912a4589a7?w=800&q=80',
        categories: ['all', 'ski', 'family']
    },
    {
        id: 7,
        name: 'Tokyo',
        location: 'Tokyo',
        country: 'Japan',
        flag: '🇯🇵',
        price: 6750,
        image: 'https://images.unsplash.com/photo-1540959733332-eab4deabeeaf?w=800&q=80',
        categories: ['all', 'culture', 'family']
    },
    {
        id: 8,
        name: 'Dubai',
        location: 'Dubai',
        country: 'UAE',
        flag: '🇦🇪',
        price: 9200,
        image: 'https://images.unsplash.com/photo-1512453979798-5ea266f8880c?w=800&q=80',
        categories: ['all', 'family']
    }
];

const tabs = [
    { id: 'all', label: 'All' },
    { id: 'beach', label: 'Beach' },
    { id: 'culture', label: 'Culture' },
    { id: 'ski', label: 'Ski' },
    { id: 'family', label: 'Family' }
];

export default function TopDestinations() {
    const [activeTab, setActiveTab] = useState('all');

    const filteredDestinations = mockDestinations.filter(dest =>
        dest.categories.includes(activeTab)
    );

    return (
        <div className="min-h-screen bg-black text-white pb-16 px-4">
            <div className="max-w-7xl mx-auto">
                {/* Header */}
                <Heading title={" Stays in Top Destinations"} subtitle={"  Find the right place to stay — beach breaks, family getaways, and more."} />


                {/* Tabs */}
                <div className="flex justify-center gap-3 mb-12 flex-wrap">
                    {tabs.map((tab, i) => (
                        <FadeupAnimation
                            key={tab.id}
                            delay={i * 0.2}
                        >
                            <button
                                onClick={() => setActiveTab(tab.id)}
                                className={`px-6 py-2.5 rounded-full font-medium transition-all duration-300 ${activeTab === tab.id
                                    ? 'bg-primary text-black shadow-lg '
                                    : 'bg-gray-800 text-gray-300 hover:bg-gray-700'
                                    }`}
                            >
                                {tab.label}
                            </button>
                        </FadeupAnimation>
                    ))}
                </div>

                {/* Cards Grid */}
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    {filteredDestinations.map((destination, idx) => (
                        <FadeupAnimation key={idx} delay={idx * 0.1}>


                            <div
                                key={destination.id}
                                className="group  rounded-2xl overflow-hidden p-3 transition-all duration-300 cursor-pointer border border-gray-800 hover:border-gray-700"
                            >
                                {/* Image */}
                                <div className="relative h-56 overflow-hidden rounded-xl">
                                    <img
                                        src={destination.image}
                                        alt={destination.name}
                                        className="w-full h-full rounded-xl object-cover  transition-transform duration-500"
                                    />
                                    <div className="absolute rounded-xl inset-0 bg-gradient-to-t from-black/60 to-transparent" />
                                </div>

                                {/* Content */}
                                <div className="p-6">
                                    <h3 className="text-2xl font-bold mb-2">{destination.name}</h3>

                                    <div className="flex items-center gap-2 text-gray-400 text-sm mb-4">
                                        <span>{destination.location}</span>
                                        <span>•</span>
                                        <span className="flex items-center gap-1">
                                            <span>{destination.flag}</span>
                                            <span>{destination.country}</span>
                                        </span>
                                    </div>

                                    <div className="flex items-center justify-between">
                                        <div>
                                            <div className="text-2xl font-bold">
                                                ${destination.price.toLocaleString()}
                                            </div>
                                            <div className="text-gray-500 text-sm">Avg. nightly price</div>
                                        </div>

                                        <button className="w-10 h-10 rounded-full bg-gray-800 flex items-center justify-center group-hover:bg-primary group-hover:text-black transition-all duration-300">
                                            <ChevronRight className="w-5 h-5" />
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </FadeupAnimation>
                    ))}
                </div>

                {/* Empty State */}
                {filteredDestinations.length === 0 && (
                    <div className="text-center py-20">
                        <MapPin className="w-16 h-16 mx-auto mb-4 text-gray-600" />
                        <h3 className="text-xl font-semibold text-gray-400">
                            No destinations found
                        </h3>
                        <p className="text-gray-500 mt-2">
                            Try selecting a different category
                        </p>
                    </div>
                )}
            </div>
        </div>
    );
}

--- END OF FILE: sections\TopDestinations\TopDestinations.jsx ---

================================================================================

    └── WhyChooseSkyight/
            ├── WhyChooseSkyight.jsx

--- START OF FILE: sections\WhyChooseSkyight\WhyChooseSkyight.jsx ---

import FadeupAnimation from '@/components/FadeupAnimation'
import Heading from '@/components/Heading'
import { Card, CardContent } from '@/components/ui/card'
import { Clock, Coffee, Wifi } from 'lucide-react'
import React from 'react'

export default function WhyChooseSkyight() {
    return (
        <section className="py-16 bg-black">
            <div className="container px-4 mx-auto">
                <Heading title={"Why Choose Skyight?"} />
                <div className="grid grid-cols-1 gap-8 md:grid-cols-3">
                    <FadeupAnimation delay={0.1}>
                        <Card className="text-center">
                            <CardContent className="p-6">
                                <Clock className="w-12 h-12 mx-auto mb-4 text-primary" />
                                <h3 className="mb-2 text-xl font-semibold">24/7 Support</h3>
                                <p className="text-muted-foreground">
                                    Round-the-clock customer service for all your travel needs
                                </p>
                            </CardContent>
                        </Card>
                    </FadeupAnimation>
                    <FadeupAnimation delay={0.12}>

                        <Card className="text-center">
                            <CardContent className="p-6">
                                <Wifi className="w-12 h-12 mx-auto mb-4 text-primary" />
                                <h3 className="mb-2 text-xl font-semibold">Best Prices</h3>
                                <p className="text-muted-foreground">
                                    Compare prices from hundreds of sources to find the best deals
                                </p>
                            </CardContent>
                        </Card>
                    </FadeupAnimation>
                    <FadeupAnimation delay={0.13}>
                        <Card className="text-center">
                            <CardContent className="p-6">
                                <Coffee className="w-12 h-12 mx-auto mb-4 text-primary" />
                                <h3 className="mb-2 text-xl font-semibold">Easy Booking</h3>
                                <p className="text-muted-foreground">
                                    Simple and secure booking process in just a few clicks
                                </p>
                            </CardContent>
                        </Card>
                    </FadeupAnimation>
                </div>
            </div>
        </section>
    )
}


--- END OF FILE: sections\WhyChooseSkyight\WhyChooseSkyight.jsx ---

================================================================================

└── ui/
        ├── PhoneInput.jsx
        ├── accordion.jsx
        ├── alert-dialog.jsx
        ├── alert.jsx
        ├── aspect-ratio.jsx
        ├── avatar.jsx
        ├── badge.jsx
        ├── breadcrumb.jsx
        ├── button.jsx
        ├── calendar.jsx
        ├── card.jsx
        ├── carousel.jsx
        ├── chart.jsx
        ├── checkbox.jsx
        ├── collapsible.jsx
        ├── command.jsx
        ├── context-menu.jsx
        ├── counter.jsx
        ├── dialog.jsx
        ├── drawer.jsx
        ├── dropdown-menu.jsx
        ├── dropdown.jsx
        ├── form.jsx
        ├── hover-card.jsx
        ├── input-otp.jsx
        ├── input.jsx
        ├── label.jsx
        ├── menubar.jsx
        ├── multi-step-form.jsx
        ├── navigation-menu.jsx
        ├── pagination.jsx
        ├── popover.jsx
        ├── progress.jsx
        ├── radio-group.jsx
        ├── resizable.jsx
        ├── scroll-area.jsx
        ├── select.jsx
        ├── separator.jsx
        ├── sheet.jsx
        ├── sidebar.jsx
        ├── skeleton.Jsx
        ├── sonner.jsx
        ├── switch.jsx
        ├── table.jsx
        ├── tabs.jsx
        ├── textarea.jsx
        ├── toggle-group.jsx
        ├── toggle.jsx
        ├── tooltip.jsx

--- START OF FILE: ui\PhoneInput.jsx ---

// components/PhoneInput.jsx
"use client";

import { forwardRef, useState } from "react";
import * as Popover from "@radix-ui/react-popover";
import * as ScrollArea from "@radix-ui/react-scroll-area";
import { ChevronDown, Check } from "lucide-react";
import flags from "react-phone-number-input/flags";
import PhoneNumberInput, {
  getCountries,
  getCountryCallingCode,
} from "react-phone-number-input";
import "react-phone-number-input/style.css";

export function PhoneInput({ value, onChange, className }) {
  return (
    <PhoneNumberInput
      className={`flex w-full rounded-md border border-input bg-background text-foreground focus-within:ring-2 focus-within:ring-ring focus-within:ring-offset-2 ${className}`}
      value={value}
      defaultCountry={"IR"}
      smartCaret={false}
      onChange={onChange}
      flagComponent={Flag}
      inputComponent={Input}
      countrySelectComponent={CountrySelector}
    />
  );
}

// 1) Base text input styling
const Input = forwardRef((props, ref) => (
  <input
    ref={ref}
    {...props}
    className="flex-1 px-3 py-2 text-sm bg-transparent placeholder:text-muted-foreground focus:outline-none"
  />
));
Input.displayName = "PhoneInputInput";

// 2) Flag renderer
const Flag = ({ country, countryName }) => {
  if (!country) return <span className="w-6" />;
  const FlagSvg = flags[country];
  return (
    <span className="w-6">{FlagSvg && <FlagSvg title={countryName} />}</span>
  );
};

// Only supported countries
const allCountries = getCountries().sort();

function CountrySelector({ value, onChange, disabled }) {
  const [open, setOpen] = useState(false);
  const [search, setSearch] = useState("");

  const list = allCountries.filter((c) => {
    const name = new Intl.DisplayNames(["en"], { type: "region" }).of(c) || "";
    return (
      c.toLowerCase().includes(search.toLowerCase()) ||
      name.toLowerCase().includes(search.toLowerCase())
    );
  });

  return (
    <Popover.Root open={open} onOpenChange={setOpen}>
      <Popover.Trigger asChild>
        <button
          type="button"
          disabled={disabled}
          className="flex items-center px-3 border-r border-input bg-popover text-popover-foreground hover:bg-popover/90 focus:outline-none"
        >
          <Flag country={value} countryName={value} />
          <span className="ml-1 text-sm">{value?.toUpperCase() || "—"}</span>
          <ChevronDown className="w-4 h-4 ml-1 opacity-70" />
        </button>
      </Popover.Trigger>

      <Popover.Portal>
        <Popover.Content className="z-50 w-64 border rounded-md shadow-md bg-popover border-border">
          <input
            type="text"
            className="w-full px-3 py-2 text-sm bg-transparent border-b border-border placeholder:text-muted-foreground focus:outline-none"
            placeholder="Search country…"
            value={search}
            onChange={(e) => setSearch(e.target.value)}
          />
          <ScrollArea.Root className="h-60">
            <ScrollArea.Viewport>
              <ul>
                {list.map((c) => {
                  const name =
                    new Intl.DisplayNames(["en"], {
                      type: "region",
                    }).of(c) || c;
                  const callingCode = getCountryCallingCode(c);
                  const isSelected = c === value;
                  return (
                    <li key={c}>
                      <button
                        onClick={() => {
                          onChange(c);
                          setOpen(false);
                        }}
                        className={`flex w-full items-center px-3 py-2 text-sm text-foreground hover:bg-popover/80 ${
                          isSelected ? "bg-primary/10" : ""
                        }`}
                      >
                        <Flag country={c} countryName={name} />
                        <span className="flex-1 ml-2">{name}</span>
                        <span className="text-xs text-muted-foreground">
                          +{callingCode}
                        </span>
                        {isSelected && (
                          <Check className="w-4 h-4 ml-2 text-primary" />
                        )}
                      </button>
                    </li>
                  );
                })}
              </ul>
            </ScrollArea.Viewport>
            <ScrollArea.Scrollbar orientation="vertical">
              <ScrollArea.Thumb className="rounded-full bg-muted" />
            </ScrollArea.Scrollbar>
            <ScrollArea.Corner />
          </ScrollArea.Root>
        </Popover.Content>
      </Popover.Portal>
    </Popover.Root>
  );
}

export default PhoneInput;


--- END OF FILE: ui\PhoneInput.jsx ---

================================================================================


--- START OF FILE: ui\accordion.jsx ---

"use client";
import { cn } from "@/lib/utils";
import { forwardRef } from "react";
import { ChevronDown } from "lucide-react";
import * as AccordionPrimitive from "@radix-ui/react-accordion";


const Accordion = AccordionPrimitive.Root;

const AccordionItem = forwardRef(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
));
AccordionItem.displayName = "AccordionItem";

const AccordionTrigger = forwardRef(
  ({ className, children, ...props }, ref) => (
    <AccordionPrimitive.Header className="flex">
      <AccordionPrimitive.Trigger
        ref={ref}
        className={cn(
          "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
          className
        )}
        {...props}
      >
        {children}
        <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
      </AccordionPrimitive.Trigger>
    </AccordionPrimitive.Header>
  )
);
AccordionTrigger.displayName = "AccordionTrigger";

const AccordionContent = forwardRef(
  ({ className, children, ...props }, ref) => (
    <AccordionPrimitive.Content
      ref={ref}
      className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
      {...props}
    >
      <div className={cn("pb-4 pt-0", className)}>{children}</div>
    </AccordionPrimitive.Content>
  )
);
AccordionContent.displayName = "AccordionContent";

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent };


--- END OF FILE: ui\accordion.jsx ---

================================================================================


--- START OF FILE: ui\alert-dialog.jsx ---

"use client";
import { cn } from "@/lib/utils";
import { forwardRef } from "react";
import { buttonVariants } from "@/components/ui/button";
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog";

const AlertDialog = AlertDialogPrimitive.Root;
const AlertDialogTrigger = AlertDialogPrimitive.Trigger;
const AlertDialogPortal = AlertDialogPrimitive.Portal;

const AlertDialogOverlay = forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
));
AlertDialogOverlay.displayName = "AlertDialogOverlay";

const AlertDialogContent = forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
));
AlertDialogContent.displayName = "AlertDialogContent";

const AlertDialogHeader = ({ className, ...props }) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
);
AlertDialogHeader.displayName = "AlertDialogHeader";

const AlertDialogFooter = ({ className, ...props }) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
);
AlertDialogFooter.displayName = "AlertDialogFooter";

const AlertDialogTitle = forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
));
AlertDialogTitle.displayName = "AlertDialogTitle";

const AlertDialogDescription = forwardRef(
  ({ className, ...props }, ref) => (
    <AlertDialogPrimitive.Description
      ref={ref}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
);
AlertDialogDescription.displayName = "AlertDialogDescription";

const AlertDialogAction = forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
));
AlertDialogAction.displayName = "AlertDialogAction";

const AlertDialogCancel = forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
));
AlertDialogCancel.displayName = "AlertDialogCancel";

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
};


--- END OF FILE: ui\alert-dialog.jsx ---

================================================================================


--- START OF FILE: ui\alert.jsx ---

import { cn } from "@/lib/utils"
import { forwardRef } from "react"
import { cva } from "class-variance-authority"


const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = forwardRef(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = forwardRef(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }


--- END OF FILE: ui\alert.jsx ---

================================================================================


--- START OF FILE: ui\aspect-ratio.jsx ---

"use client"

import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }


--- END OF FILE: ui\aspect-ratio.jsx ---

================================================================================


--- START OF FILE: ui\avatar.jsx ---

"use client"
import { forwardRef } from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = forwardRef(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = forwardRef(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = forwardRef(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }


--- END OF FILE: ui\avatar.jsx ---

================================================================================


--- START OF FILE: ui\badge.jsx ---

import { cn } from "@/lib/utils";
import { cva } from "class-variance-authority";

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
);

function Badge({ className, variant, ...props }) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  );
}

export { Badge, badgeVariants };


--- END OF FILE: ui\badge.jsx ---

================================================================================


--- START OF FILE: ui\breadcrumb.jsx ---

import { forwardRef } from "react";
import { Slot } from "@radix-ui/react-slot";
import { ChevronRight, MoreHorizontal } from "lucide-react";

import { cn } from "@/lib/utils";

const Breadcrumb = forwardRef(({ ...props }, ref) => (
  <nav ref={ref} aria-label="breadcrumb" {...props} />
));
Breadcrumb.displayName = "Breadcrumb";

const BreadcrumbList = forwardRef(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
));
BreadcrumbList.displayName = "BreadcrumbList";

const BreadcrumbItem = forwardRef(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
));
BreadcrumbItem.displayName = "BreadcrumbItem";

const BreadcrumbLink = forwardRef(
  ({ asChild, className, ...props }, ref) => {
    const Comp = asChild ? Slot : "a";

    return (
      <Comp
        ref={ref}
        className={cn("transition-colors hover:text-foreground", className)}
        {...props}
      />
    );
  }
);
BreadcrumbLink.displayName = "BreadcrumbLink";

const BreadcrumbPage = forwardRef(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
));
BreadcrumbPage.displayName = "BreadcrumbPage";

const BreadcrumbSeparator = ({ children, className, ...props }) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:w-3.5 [&>svg]:h-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
);
BreadcrumbSeparator.displayName = "BreadcrumbSeparator";

const BreadcrumbEllipsis = ({ className, ...props }) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
);
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis";

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
};


--- END OF FILE: ui\breadcrumb.jsx ---

================================================================================


--- START OF FILE: ui\button.jsx ---

import { cn } from "@/lib/utils";
import { forwardRef } from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva } from "class-variance-authority";
import Loader from "../loader";

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

const Button = forwardRef(
  (
    {
      className,
      variant,
      size,
      asChild = false,
      loading = false,
      children,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button";

    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        disabled={loading || props.disabled}
        {...props}
      >
        {loading ? <Loader /> : children}
      </Comp>
    );
  }
);
Button.displayName = "Button";

export { Button, buttonVariants };


--- END OF FILE: ui\button.jsx ---

================================================================================


--- START OF FILE: ui\calendar.jsx ---

"use client";
import { cn } from "@/lib/utils";
import { DayPicker } from "react-day-picker";
import { buttonVariants } from "@/components/ui/button";
import { ChevronLeft, ChevronRight } from "lucide-react";

function Calendar({ className, classNames, showOutsideDays = true, ...props }) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ...props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ...props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  );
}
Calendar.displayName = "Calendar";

export { Calendar };


--- END OF FILE: ui\calendar.jsx ---

================================================================================


--- START OF FILE: ui\card.jsx ---

import { forwardRef } from "react";

import { cn } from "@/lib/utils";

const Card = forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
));
Card.displayName = "Card";

const CardHeader = forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
));
CardHeader.displayName = "CardHeader";

const CardTitle = forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
));
CardTitle.displayName = "CardTitle";

const CardDescription = forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
CardDescription.displayName = "CardDescription";

const CardContent = forwardRef(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
));
CardContent.displayName = "CardContent";

const CardFooter = forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
));
CardFooter.displayName = "CardFooter";

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardDescription,
  CardContent,
};


--- END OF FILE: ui\card.jsx ---

================================================================================


--- START OF FILE: ui\carousel.jsx ---

"use client";
import { ArrowLeft, ArrowRight } from "lucide-react";

import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { forwardRef, useCallback, useContext, useEffect, useState,createContext } from "react";
import useEmblaCarousel from "embla-carousel-react";

const CarouselContext = createContext(null);

function useCarousel() {
  const context = useContext(CarouselContext);

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />");
  }

  return context;
}

const Carousel = forwardRef(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    );
    const [canScrollPrev, setCanScrollPrev] = useState(false);
    const [canScrollNext, setCanScrollNext] = useState(false);

    const onSelect = useCallback((api) => {
      if (!api) {
        return;
      }

      setCanScrollPrev(api.canScrollPrev());
      setCanScrollNext(api.canScrollNext());
    }, []);

    const scrollPrev = useCallback(() => {
      api?.scrollPrev();
    }, [api]);

    const scrollNext = useCallback(() => {
      api?.scrollNext();
    }, [api]);

    const handleKeyDown = useCallback(
      (event) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault();
          scrollPrev();
        } else if (event.key === "ArrowRight") {
          event.preventDefault();
          scrollNext();
        }
      },
      [scrollPrev, scrollNext]
    );

    useEffect(() => {
      if (!api || !setApi) {
        return;
      }

      setApi(api);
    }, [api, setApi]);

    useEffect(() => {
      if (!api) {
        return;
      }

      onSelect(api);
      api.on("reInit", onSelect);
      api.on("select", onSelect);

      return () => {
        api?.off("select", onSelect);
      };
    }, [api, onSelect]);

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    );
  }
);
Carousel.displayName = "Carousel";

const CarouselContent = forwardRef(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel();

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  );
});
CarouselContent.displayName = "CarouselContent";

const CarouselItem = forwardRef(({ className, ...props }, ref) => {
  const { orientation } = useCarousel();

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  );
});
CarouselItem.displayName = "CarouselItem";

const CarouselPrevious = forwardRef(
  ({ className, variant = "outline", size = "icon", ...props }, ref) => {
    const { orientation, scrollPrev, canScrollPrev } = useCarousel();

    return (
      <Button
        ref={ref}
        variant={variant}
        size={size}
        className={cn(
          "absolute  h-8 w-8 rounded-full",
          orientation === "horizontal"
            ? "-left-12 top-1/2 -translate-y-1/2"
            : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
          className
        )}
        disabled={!canScrollPrev}
        onClick={scrollPrev}
        {...props}
      >
        <ArrowLeft className="w-4 h-4" />
        <span className="sr-only">Previous slide</span>
      </Button>
    );
  }
);
CarouselPrevious.displayName = "CarouselPrevious";

const CarouselNext = forwardRef(
  ({ className, variant = "outline", size = "icon", ...props }, ref) => {
    const { orientation, scrollNext, canScrollNext } = useCarousel();

    return (
      <Button
        ref={ref}
        variant={variant}
        size={size}
        className={cn(
          "absolute h-8 w-8 rounded-full",
          orientation === "horizontal"
            ? "-right-12 top-1/2 -translate-y-1/2"
            : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
          className
        )}
        disabled={!canScrollNext}
        onClick={scrollNext}
        {...props}
      >
        <ArrowRight className="w-4 h-4" />
        <span className="sr-only">Next slide</span>
      </Button>
    );
  }
);
CarouselNext.displayName = "CarouselNext";

export {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
};


--- END OF FILE: ui\carousel.jsx ---

================================================================================


--- START OF FILE: ui\chart.jsx ---

"use client";
import React, { createContext } from "react";
import { cn } from "@/lib/utils";
import * as RechartsPrimitive from "recharts";

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" };

const ChartContext = createContext(null);

function useChart() {
  const context = useContext(ChartContext);

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />");
  }

  return context;
}

const ChartContainer = forwardRef(
  ({ id, className, children, config, ...props }, ref) => {
    const uniqueId = useId();
    const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`;

    return (
      <ChartContext.Provider value={{ config }}>
        <div
          data-chart={chartId}
          ref={ref}
          className={cn(
            "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
            className
          )}
          {...props}
        >
          <ChartStyle id={chartId} config={config} />
          <RechartsPrimitive.ResponsiveContainer>
            {children}
          </RechartsPrimitive.ResponsiveContainer>
        </div>
      </ChartContext.Provider>
    );
  }
);
ChartContainer.displayName = "Chart";

const ChartStyle = ({ id, config }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  );

  if (!colorConfig.length) {
    return null;
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color = itemConfig.theme?.theme || itemConfig.color;
    return color ? `  --color-${key}: ${color};` : null;
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  );
};

const ChartTooltip = RechartsPrimitive.Tooltip;

const ChartTooltipContent = forwardRef(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart();

    const tooltipLabel = useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null;
      }

      const [item] = payload;
      const key = `${labelKey || item.dataKey || item.name || "value"}`;
      const itemConfig = getPayloadConfigFromPayload(config, item, key);
      const value =
        !labelKey && typeof label === "string"
          ? config[label]?.label || label
          : itemConfig?.label;

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        );
      }

      if (!value) {
        return null;
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>;
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ]);

    if (!active || !payload?.length) {
      return null;
    }

    const nestLabel = payload.length === 1 && indicator !== "dot";

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`;
            const itemConfig = getPayloadConfigFromPayload(config, item, key);
            const indicatorColor = color || item.payload.fill || item.color;

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={{
                            "--color-bg": indicatorColor,
                            "--color-border": indicatorColor,
                          }}
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            );
          })}
        </div>
      </div>
    );
  }
);
ChartTooltipContent.displayName = "ChartTooltip";

const ChartLegend = RechartsPrimitive.Legend;

const ChartLegendContent = forwardRef(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart();

    if (!payload?.length) {
      return null;
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`;
          const itemConfig = getPayloadConfigFromPayload(config, item, key);

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          );
        })}
      </div>
    );
  }
);
ChartLegendContent.displayName = "ChartLegend";

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(config, payload, key) {
  if (typeof payload !== "object" || payload === null) {
    return undefined;
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined;

  let configLabelKey = key;

  if (key in payload && typeof payload[key] === "string") {
    configLabelKey = payload[key];
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key] === "string"
  ) {
    configLabelKey = payloadPayload[key];
  }

  return configLabelKey in config ? config[configLabelKey] : config[key];
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
};


--- END OF FILE: ui\chart.jsx ---

================================================================================


--- START OF FILE: ui\checkbox.jsx ---

"use client";
import { cn } from "@/lib/utils";
import { forwardRef } from "react";
import { Check } from "lucide-react";
import * as CheckboxPrimitive from "@radix-ui/react-checkbox";

const Checkbox = forwardRef(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
));
Checkbox.displayName = CheckboxPrimitive.Root.displayName;

export { Checkbox };


--- END OF FILE: ui\checkbox.jsx ---

================================================================================


--- START OF FILE: ui\collapsible.jsx ---

"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }


--- END OF FILE: ui\collapsible.jsx ---

================================================================================


--- START OF FILE: ui\command.jsx ---

"use client";

import { cn } from "@/lib/utils";
import { forwardRef } from "react";
import { Search } from "lucide-react";
import { Command as CommandPrimitive } from "cmdk";
import { Dialog, DialogContent } from "@/components/ui/dialog";

const Command = forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
));
Command.displayName = CommandPrimitive.displayName;

const CommandDialog = ({ children, ...props }) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  );
};

const CommandInput = forwardRef(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
));

CommandInput.displayName = CommandPrimitive.Input.displayName;

const CommandList = forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
));

CommandList.displayName = CommandPrimitive.List.displayName;

const CommandEmpty = forwardRef((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
));

CommandEmpty.displayName = CommandPrimitive.Empty.displayName;

const CommandGroup = forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
));

CommandGroup.displayName = CommandPrimitive.Group.displayName;

const CommandSeparator = forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
));
CommandSeparator.displayName = CommandPrimitive.Separator.displayName;

const CommandItem = forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      className
    )}
    {...props}
  />
));

CommandItem.displayName = CommandPrimitive.Item.displayName;

const CommandShortcut = ({ className, ...props }) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  );
};
CommandShortcut.displayName = "CommandShortcut";

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
};


--- END OF FILE: ui\command.jsx ---

================================================================================


--- START OF FILE: ui\context-menu.jsx ---

"use client";
import { cn } from "@/lib/utils";
import { forwardRef } from "react";
import { Check, ChevronRight, Circle } from "lucide-react";
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu";

const ContextMenu = ContextMenuPrimitive.Root;

const ContextMenuTrigger = ContextMenuPrimitive.Trigger;

const ContextMenuGroup = ContextMenuPrimitive.Group;

const ContextMenuPortal = ContextMenuPrimitive.Portal;

const ContextMenuSub = ContextMenuPrimitive.Sub;

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup;

const ContextMenuSubTrigger = forwardRef(
  ({ className, inset, children, ...props }, ref) => (
    <ContextMenuPrimitive.SubTrigger
      ref={ref}
      className={cn(
        "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
        inset && "pl-8",
        className
      )}
      {...props}
    >
      {children}
      <ChevronRight className="ml-auto h-4 w-4" />
    </ContextMenuPrimitive.SubTrigger>
  )
);
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName;

const ContextMenuSubContent = forwardRef(
  ({ className, ...props }, ref) => (
    <ContextMenuPrimitive.SubContent
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  )
);
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName;

const ContextMenuContent = forwardRef(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
));
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName;

const ContextMenuItem = forwardRef(
  ({ className, inset, ...props }, ref) => (
    <ContextMenuPrimitive.Item
      ref={ref}
      className={cn(
        "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
        inset && "pl-8",
        className
      )}
      {...props}
    />
  )
);
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName;

const ContextMenuCheckboxItem = forwardRef(
  ({ className, children, checked, ...props }, ref) => (
    <ContextMenuPrimitive.CheckboxItem
      ref={ref}
      className={cn(
        "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
        className
      )}
      checked={checked}
      {...props}
    >
      <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
        <ContextMenuPrimitive.ItemIndicator>
          <Check className="h-4 w-4" />
        </ContextMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </ContextMenuPrimitive.CheckboxItem>
  )
);
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName;

const ContextMenuRadioItem = forwardRef(
  ({ className, children, ...props }, ref) => (
    <ContextMenuPrimitive.RadioItem
      ref={ref}
      className={cn(
        "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
        className
      )}
      {...props}
    >
      <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
        <ContextMenuPrimitive.ItemIndicator>
          <Circle className="h-2 w-2 fill-current" />
        </ContextMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </ContextMenuPrimitive.RadioItem>
  )
);
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName;

const ContextMenuLabel = forwardRef(
  ({ className, inset, ...props }, ref) => (
    <ContextMenuPrimitive.Label
      ref={ref}
      className={cn(
        "px-2 py-1.5 text-sm font-semibold text-foreground",
        inset && "pl-8",
        className
      )}
      {...props}
    />
  )
);
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName;

const ContextMenuSeparator = forwardRef(
  ({ className, ...props }, ref) => (
    <ContextMenuPrimitive.Separator
      ref={ref}
      className={cn("-mx-1 my-1 h-px bg-border", className)}
      {...props}
    />
  )
);
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName;

const ContextMenuShortcut = ({ className, ...props }) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  );
};
ContextMenuShortcut.displayName = "ContextMenuShortcut";

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
};


--- END OF FILE: ui\context-menu.jsx ---

================================================================================


--- START OF FILE: ui\counter.jsx ---

const Counter = ({ label, value, setValue, min = 0, max = 10 }) => (
  <div className="flex items-center justify-between py-1 text-foreground">
    <span>{label}</span>
    <div className="flex items-center space-x-2">
      <button
        type="button"
        onClick={() => setValue(Math.max(min, value - 1))}
        className="w-6 h-6 text-lg leading-tight border rounded text-foreground border-input bg-background hover:bg-muted"
      >
        –
      </button>
      <span>{value}</span>
      <button
        type="button"
        onClick={() => setValue(Math.min(max, value + 1))}
        className="w-6 h-6 text-lg leading-tight border rounded text-foreground border-input bg-background hover:bg-muted"
      >
        +
      </button>
    </div>
  </div>
);

export { Counter };


--- END OF FILE: ui\counter.jsx ---

================================================================================


--- START OF FILE: ui\dialog.jsx ---

"use client";

import { cn } from "@/lib/utils";
import { X } from "lucide-react";
import { forwardRef } from "react";
import * as DialogPrimitive from "@radix-ui/react-dialog";

const Dialog = DialogPrimitive.Root;

const DialogTrigger = DialogPrimitive.Trigger;

const DialogPortal = DialogPrimitive.Portal;

const DialogClose = DialogPrimitive.Close;

const DialogOverlay = forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
));
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName;

const DialogContent = forwardRef(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
));
DialogContent.displayName = DialogPrimitive.Content.displayName;

const DialogHeader = ({ className, ...props }) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
);
DialogHeader.displayName = "DialogHeader";

const DialogFooter = ({ className, ...props }) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
);
DialogFooter.displayName = "DialogFooter";

const DialogTitle = forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
));
DialogTitle.displayName = DialogPrimitive.Title.displayName;

const DialogDescription = forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
DialogDescription.displayName = DialogPrimitive.Description.displayName;

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
};


--- END OF FILE: ui\dialog.jsx ---

================================================================================


--- START OF FILE: ui\drawer.jsx ---

"use client";

import { cn } from "@/lib/utils";
import { forwardRef } from "react";
import { Drawer as DrawerPrimitive } from "vaul";

const Drawer = ({ shouldScaleBackground = true, ...props }) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
);
Drawer.displayName = "Drawer";

const DrawerTrigger = DrawerPrimitive.Trigger;

const DrawerPortal = DrawerPrimitive.Portal;

const DrawerClose = DrawerPrimitive.Close;

const DrawerOverlay = forwardRef(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
));
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName;

const DrawerContent = forwardRef(
  ({ className, children, ...props }, ref) => (
    <DrawerPortal>
      <DrawerOverlay />
      <DrawerPrimitive.Content
        ref={ref}
        className={cn(
          "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
          className
        )}
        {...props}
      >
        <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
        {children}
      </DrawerPrimitive.Content>
    </DrawerPortal>
  )
);
DrawerContent.displayName = "DrawerContent";

const DrawerHeader = ({ className, ...props }) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
);
DrawerHeader.displayName = "DrawerHeader";

const DrawerFooter = ({ className, ...props }) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
);
DrawerFooter.displayName = "DrawerFooter";

const DrawerTitle = forwardRef(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
));
DrawerTitle.displayName = DrawerPrimitive.Title.displayName;

const DrawerDescription = forwardRef(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
DrawerDescription.displayName = DrawerPrimitive.Description.displayName;

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
};


--- END OF FILE: ui\drawer.jsx ---

================================================================================


--- START OF FILE: ui\dropdown-menu.jsx ---

"use client";
import { cn } from "@/lib/utils";
import { forwardRef } from "react";
import { Check, ChevronRight, Circle } from "lucide-react";
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu";

const DropdownMenu = DropdownMenuPrimitive.Root;

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;

const DropdownMenuGroup = DropdownMenuPrimitive.Group;

const DropdownMenuPortal = DropdownMenuPrimitive.Portal;

const DropdownMenuSub = DropdownMenuPrimitive.Sub;

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;

const DropdownMenuSubTrigger = forwardRef(
  ({ className, inset, children, ...props }, ref) => (
    <DropdownMenuPrimitive.SubTrigger
      ref={ref}
      className={cn(
        "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
        inset && "pl-8",
        className
      )}
      {...props}
    >
      {children}
      <ChevronRight className="ml-auto" />
    </DropdownMenuPrimitive.SubTrigger>
  )
);
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName;

const DropdownMenuSubContent = forwardRef(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
));
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName;

const DropdownMenuContent = forwardRef(
  ({ className, sideOffset = 4, ...props }, ref) => (
    <DropdownMenuPrimitive.Portal>
      <DropdownMenuPrimitive.Content
        ref={ref}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </DropdownMenuPrimitive.Portal>
  )
);
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;

const DropdownMenuItem = forwardRef(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
));
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;

const DropdownMenuCheckboxItem = forwardRef(
  ({ className, children, checked, ...props }, ref) => (
    <DropdownMenuPrimitive.CheckboxItem
      ref={ref}
      className={cn(
        "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
        className
      )}
      checked={checked}
      {...props}
    >
      <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <Check className="w-4 h-4" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.CheckboxItem>
  )
);
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName;

const DropdownMenuRadioItem = forwardRef(
  ({ className, children, ...props }, ref) => (
    <DropdownMenuPrimitive.RadioItem
      ref={ref}
      className={cn(
        "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
        className
      )}
      {...props}
    >
      <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <Circle className="w-2 h-2 fill-current" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.RadioItem>
  )
);
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;

const DropdownMenuLabel = forwardRef(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
));
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;

const DropdownMenuSeparator = forwardRef(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
));
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;

const DropdownMenuShortcut = ({ className, ...props }) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  );
};
DropdownMenuShortcut.displayName = "DropdownMenuShortcut";

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
};


--- END OF FILE: ui\dropdown-menu.jsx ---

================================================================================


--- START OF FILE: ui\dropdown.jsx ---

"use client";

import React from "react";
import ReactSelect from "react-select";
import { useTheme } from "next-themes"; // optional if you use next-themes

export default function Dropdown({
  value,
  loading,
  disabled,
  onChange,
  options = [],
  placeholder = "Select…",
  isClearable = false,
  styles = {},
  ensureUnique = true,
  ...props
}) {
  const { theme } = useTheme(); // 'light' or 'dark'

  const isDark = theme === "dark";

  const customStyles = {
    control: (provided, state) => ({
      ...provided,
      cursor: disabled ? "not-allowed" : "pointer",
      backgroundColor: isDark ? "#1f2937" : "white", // gray-800 or white
      borderColor: state.isFocused
        ? isDark
          ? "#3b82f6"
          : "#3b82f6"
        : isDark
        ? "#374151"
        : "#d1d5db", // gray-700 or gray-300
      boxShadow: state.isFocused
        ? `0 0 0 1px ${isDark ? "#3b82f6" : "#3b82f6"}`
        : provided.boxShadow,
      "&:hover": {
        borderColor: "#3b82f6",
      },
      borderRadius: "0.375rem", // rounded-md
      minHeight: "2.5rem",
      color: isDark ? "#f9fafb" : "#111827",
    }),
    menu: (provided) => ({
      ...provided,
      backgroundColor: isDark ? "#1f2937" : "white",
      borderRadius: "0.375rem",
      zIndex: 9999,
    }),
    option: (provided, state) => ({
      ...provided,
      backgroundColor: state.isFocused
        ? isDark
          ? "#374151"
          : "#e0f2fe"
        : state.isSelected
        ? isDark
          ? "#1d4ed8"
          : "#bfdbfe"
        : provided.backgroundColor,
      color: isDark ? "#f9fafb" : "#111827",
      cursor: "pointer",
    }),
    singleValue: (provided) => ({
      ...provided,
      color: isDark ? "#f3f4f6" : "#374151", // gray-100 or gray-700
    }),
    placeholder: (provided) => ({
      ...provided,
      color: isDark ? "#9ca3af" : "#6b7280", // gray-400 or gray-500
    }),
    dropdownIndicator: (provided, state) => ({
      ...provided,
      color: state.isFocused ? "#3b82f6" : isDark ? "#9ca3af" : "#6b7280",
      "&:hover": {
        color: "#3b82f6",
      },
    }),
    input: (provided) => ({
      ...provided,
      color: isDark ? "#f9fafb" : "#111827", // light in dark mode, dark in light mode
    }),
  };

  const processedOptions = ensureUnique
    ? Array.from(
        options
          .reduce((map, option) => {
            if (!map.has(option.value)) map.set(option.value, option);
            return map;
          }, new Map())
          .values()
      )
    : options;

  return (
    <ReactSelect
      value={value}
      isLoading={loading}
      onChange={onChange}
      isDisabled={disabled}
      placeholder={placeholder}
      isClearable={isClearable}
      options={processedOptions}
      styles={{ ...customStyles, ...styles }}
      className="text-sm"
      classNamePrefix="rs"
      instanceId={props.instanceId || props.name}
      {...props}
    />
  );
}


--- END OF FILE: ui\dropdown.jsx ---

================================================================================


--- START OF FILE: ui\form.jsx ---

"use client";
import { cn } from "@/lib/utils";
import { Label } from "@/components/ui/label";
import { Slot } from "@radix-ui/react-slot";
import { Controller, FormProvider, useFormContext } from "react-hook-form";
import { createContext, forwardRef, useContext, useId } from "react";

const Form = FormProvider;

const FormFieldContext = createContext({});

const FormField = ({ ...props }) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  );
};

const useFormField = () => {
  const fieldContext = useContext(FormFieldContext);
  const itemContext = useContext(FormItemContext);
  const { getFieldState, formState } = useFormContext();

  const fieldState = getFieldState(fieldContext.name, formState);

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>");
  }

  const { id } = itemContext;

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  };
};

const FormItemContext = createContext({});

const FormItem = forwardRef(({ className, ...props }, ref) => {
  const id = useId();

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  );
});
FormItem.displayName = "FormItem";

const FormLabel = forwardRef(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField();

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  );
});
FormLabel.displayName = "FormLabel";

const FormControl = forwardRef(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } =
    useFormField();

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  );
});
FormControl.displayName = "FormControl";

const FormDescription = forwardRef(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField();

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  );
});
FormDescription.displayName = "FormDescription";

const FormMessage = forwardRef(
  ({ className, children, ...props }, ref) => {
    const { error, formMessageId } = useFormField();
    const body = error ? String(error?.message) : children;

    if (!body) {
      return null;
    }

    return (
      <p
        ref={ref}
        id={formMessageId}
        className={cn("text-sm font-medium text-destructive", className)}
        {...props}
      >
        {body}
      </p>
    );
  }
);
FormMessage.displayName = "FormMessage";

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
};


--- END OF FILE: ui\form.jsx ---

================================================================================


--- START OF FILE: ui\hover-card.jsx ---

"use client";

import { cn } from "@/lib/utils";
import { forwardRef } from "react";
import * as HoverCardPrimitive from "@radix-ui/react-hover-card";

const HoverCard = HoverCardPrimitive.Root;

const HoverCardTrigger = HoverCardPrimitive.Trigger;

const HoverCardContent = forwardRef(
  ({ className, align = "center", sideOffset = 4, ...props }, ref) => (
    <HoverCardPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  )
);
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName;

export { HoverCard, HoverCardTrigger, HoverCardContent };


--- END OF FILE: ui\hover-card.jsx ---

================================================================================


--- START OF FILE: ui\input-otp.jsx ---

"use client";
import { cn } from "@/lib/utils";
import { Dot } from "lucide-react";
import { forwardRef, useContext } from "react";
import { OTPInput, OTPInputContext } from "input-otp";


const InputOTP = forwardRef(
  ({ className, containerClassName, ...props }, ref) => (
    <OTPInput
      ref={ref}
      containerClassName={cn(
        "flex items-center gap-2 has-[:disabled]:opacity-50",
        containerClassName
      )}
      className={cn("disabled:cursor-not-allowed", className)}
      {...props}
    />
  )
);

InputOTP.displayName = "InputOTP";

const InputOTPGroup = forwardRef(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
));
InputOTPGroup.displayName = "InputOTPGroup";

const InputOTPSlot = forwardRef(({ index, className, ...props }, ref) => {
  const inputOTPContext = useContext(OTPInputContext);
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index];

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  );
});
InputOTPSlot.displayName = "InputOTPSlot";

const InputOTPSeparator = forwardRef(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
));
InputOTPSeparator.displayName = "InputOTPSeparator";

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator };


--- END OF FILE: ui\input-otp.jsx ---

================================================================================


--- START OF FILE: ui\input.jsx ---

import { cn } from "@/lib/utils";
import { forwardRef } from "react";

const Input = forwardRef(({ className, type, ...props }, ref) => {
  return (
    <input
      type={type}
      className={cn(
        "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props}
    />
  );
});
Input.displayName = "Input";

export { Input };


--- END OF FILE: ui\input.jsx ---

================================================================================


--- START OF FILE: ui\label.jsx ---

"use client";
import { cn } from "@/lib/utils";
import { forwardRef } from "react";
import { cva } from "class-variance-authority";
import * as LabelPrimitive from "@radix-ui/react-label";

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
);

const Label = forwardRef(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
));
Label.displayName = LabelPrimitive.Root.displayName;

export { Label };


--- END OF FILE: ui\label.jsx ---

================================================================================


--- START OF FILE: ui\menubar.jsx ---

"use client";

import * as MenubarPrimitive from "@radix-ui/react-menubar";
import { Check, ChevronRight, Circle } from "lucide-react";

import { cn } from "@/lib/utils";
import { forwardRef } from "react";

const MenubarMenu = MenubarPrimitive.Menu;

const MenubarGroup = MenubarPrimitive.Group;

const MenubarPortal = MenubarPrimitive.Portal;

const MenubarSub = MenubarPrimitive.Sub;

const MenubarRadioGroup = MenubarPrimitive.RadioGroup;

const Menubar = forwardRef(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
));
Menubar.displayName = MenubarPrimitive.Root.displayName;

const MenubarTrigger = forwardRef(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
));
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName;

const MenubarSubTrigger = forwardRef(
  ({ className, inset, children, ...props }, ref) => (
    <MenubarPrimitive.SubTrigger
      ref={ref}
      className={cn(
        "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
        inset && "pl-8",
        className
      )}
      {...props}
    >
      {children}
      <ChevronRight className="ml-auto h-4 w-4" />
    </MenubarPrimitive.SubTrigger>
  )
);
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName;

const MenubarSubContent = forwardRef(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
));
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName;

const MenubarContent = forwardRef(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
);
MenubarContent.displayName = MenubarPrimitive.Content.displayName;

const MenubarItem = forwardRef(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
));
MenubarItem.displayName = MenubarPrimitive.Item.displayName;

const MenubarCheckboxItem = forwardRef(
  ({ className, children, checked, ...props }, ref) => (
    <MenubarPrimitive.CheckboxItem
      ref={ref}
      className={cn(
        "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
        className
      )}
      checked={checked}
      {...props}
    >
      <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
        <MenubarPrimitive.ItemIndicator>
          <Check className="h-4 w-4" />
        </MenubarPrimitive.ItemIndicator>
      </span>
      {children}
    </MenubarPrimitive.CheckboxItem>
  )
);
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName;

const MenubarRadioItem = forwardRef(
  ({ className, children, ...props }, ref) => (
    <MenubarPrimitive.RadioItem
      ref={ref}
      className={cn(
        "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
        className
      )}
      {...props}
    >
      <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
        <MenubarPrimitive.ItemIndicator>
          <Circle className="h-2 w-2 fill-current" />
        </MenubarPrimitive.ItemIndicator>
      </span>
      {children}
    </MenubarPrimitive.RadioItem>
  )
);
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName;

const MenubarLabel = forwardRef(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
));
MenubarLabel.displayName = MenubarPrimitive.Label.displayName;

const MenubarSeparator = forwardRef(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
));
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName;

const MenubarShortcut = ({ className, ...props }) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  );
};
MenubarShortcut.displayname = "MenubarShortcut";

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
};


--- END OF FILE: ui\menubar.jsx ---

================================================================================


--- START OF FILE: ui\multi-step-form.jsx ---

import React, {
  useCallback,
  useContext,
  useMemo,
  useState,
  useEffect,
  useRef,
  createContext,
} from "react";
import { Slot, Slottable } from "@radix-ui/react-slot";
import { cn } from "@/lib/utils";
import { z } from "zod";

export function Stepper({ steps, currentStep }) {
  return (
    <div className="flex items-center w-full">
      {steps.map((label, index) => {
        const isActive = index === currentStep;
        const isCompleted = index < currentStep;
        return (
          <React.Fragment key={index}>
            <div className="flex flex-col items-center">
              <div
                className={cn(
                  "flex items-center justify-center w-8 h-8 rounded-full border-2",
                  isCompleted
                    ? "bg-blue-600 border-blue-600 text-white"
                    : isActive
                    ? "border-blue-600 text-blue-600"
                    : "border-gray-300 text-gray-500"
                )}
              >
                {index + 1}
              </div>
              <div className="mt-2 text-xs text-center">{label}</div>
            </div>
            {index < steps.length - 1 && (
              <div
                className={cn(
                  "flex-1 h-px mx-2",
                  isCompleted ? "bg-blue-600" : "bg-gray-300"
                )}
              />
            )}
          </React.Fragment>
        );
      })}
    </div>
  );
}

const MultiStepFormContext = createContext(null);

export function MultiStepForm({ schema, form, onSubmit, children, className }) {
  const steps = useMemo(
    () =>
      React.Children.toArray(children).filter(
        (child) =>
          React.isValidElement(child) && child.type === MultiStepFormStep
      ),
    [children]
  );

  const header = useMemo(
    () =>
      React.Children.toArray(children).find(
        (child) =>
          React.isValidElement(child) && child.type === MultiStepFormHeader
      ),
    [children]
  );

  const footer = useMemo(
    () =>
      React.Children.toArray(children).find(
        (child) =>
          React.isValidElement(child) && child.type === MultiStepFormFooter
      ),
    [children]
  );

  const stepNames = steps.map((step) => step.props.name);
  const multiStepForm = useMultiStepForm(schema, form, stepNames);

  return (
    <MultiStepFormContext.Provider value={multiStepForm}>
      <form
        onSubmit={form.handleSubmit(onSubmit)}
        className={cn(className, "flex flex-col overflow-hidden")}
      >
        {header}
        <div className="relative transition-transform duration-500">
          {steps.map((step, index) => {
            const isActive = index === multiStepForm.currentStepIndex;
            return (
              <AnimatedStep
                key={step.props.name}
                direction={multiStepForm.direction}
                isActive={isActive}
                index={index}
                currentIndex={multiStepForm.currentStepIndex}
              >
                {step}
              </AnimatedStep>
            );
          })}
        </div>
        {footer}
      </form>
    </MultiStepFormContext.Provider>
  );
}

export function MultiStepFormContextProvider({ children }) {
  const ctx = useMultiStepFormContext();
  return typeof children === "function" ? children(ctx) : children;
}

export const MultiStepFormStep = React.forwardRef(
  ({ children, asChild, ...props }, ref) => {
    const Cmp = asChild ? Slot : "div";
    return (
      <Cmp ref={ref} {...props}>
        <Slottable>{children}</Slottable>
      </Cmp>
    );
  }
);
MultiStepFormStep.displayName = "MultiStepFormStep";

export function useMultiStepFormContext() {
  const context = useContext(MultiStepFormContext);
  if (!context) {
    throw new Error(
      "useMultiStepFormContext must be used within a MultiStepForm"
    );
  }
  return context;
}

export function useMultiStepForm(schema, form, stepNames) {
  const [currentStepIndex, setCurrentStepIndex] = useState(0);
  const [direction, setDirection] = useState();

  const isStepValid = useCallback(() => {
    const currentStepName = stepNames[currentStepIndex];
    if (schema.shape) {
      const currentStepSchema = schema.shape[currentStepName];
      if (!currentStepSchema) return true;
      const currentStepData = form.getValues(currentStepName) || {};
      const result = currentStepSchema.safeParse(currentStepData);
      return result.success;
    }
    throw new Error(`Unsupported schema type`);
  }, [schema, form, stepNames, currentStepIndex]);

  const nextStep = useCallback(
    (e) => {
      e.preventDefault();
      const valid = isStepValid();
      if (!valid) {
        const currentStepName = stepNames[currentStepIndex];
        const currentStepSchema = schema.shape[currentStepName];
        if (currentStepSchema) {
          Object.keys(currentStepSchema.shape).forEach((field) => {
            form.trigger(`${currentStepName}.${field}`);
          });
        }
        return;
      }
      if (valid && currentStepIndex < stepNames.length - 1) {
        setDirection("forward");
        setCurrentStepIndex((i) => i + 1);
      }
    },
    [isStepValid, currentStepIndex, stepNames, schema, form]
  );

  const prevStep = useCallback(
    (e) => {
      e.preventDefault();
      if (currentStepIndex > 0) {
        setDirection("backward");
        setCurrentStepIndex((i) => i - 1);
      }
    },
    [currentStepIndex]
  );

  const goToStep = useCallback(
    (index) => {
      if (index >= 0 && index < stepNames.length && isStepValid()) {
        setDirection(index > currentStepIndex ? "forward" : "backward");
        setCurrentStepIndex(index);
      }
    },
    [isStepValid, stepNames.length, currentStepIndex]
  );

  const isValid = form.formState.isValid;
  const errors = form.formState.errors;

  return useMemo(
    () => ({
      form,
      currentStep: stepNames[currentStepIndex],
      currentStepIndex,
      totalSteps: stepNames.length,
      isFirstStep: currentStepIndex === 0,
      isLastStep: currentStepIndex === stepNames.length - 1,
      nextStep,
      prevStep,
      goToStep,
      direction,
      isStepValid,
      isValid,
      errors,
    }),
    [
      form,
      stepNames,
      currentStepIndex,
      nextStep,
      prevStep,
      goToStep,
      direction,
      isStepValid,
      isValid,
      errors,
    ]
  );
}

export const MultiStepFormHeader = React.forwardRef(
  ({ children, asChild, ...props }, ref) => {
    const Cmp = asChild ? Slot : "div";
    return (
      <Cmp ref={ref} {...props}>
        <Slottable>{children}</Slottable>
      </Cmp>
    );
  }
);
MultiStepFormHeader.displayName = "MultiStepFormHeader";

export const MultiStepFormFooter = React.forwardRef(
  ({ children, asChild, ...props }, ref) => {
    const Cmp = asChild ? Slot : "div";
    return (
      <Cmp ref={ref} {...props}>
        <Slottable>{children}</Slottable>
      </Cmp>
    );
  }
);
MultiStepFormFooter.displayName = "MultiStepFormFooter";

export function createStepSchema(steps) {
  return z.object(steps);
}

function AnimatedStep({ isActive, direction, children, index, currentIndex }) {
  const [shouldRender, setShouldRender] = useState(isActive);
  const stepRef = useRef(null);

  useEffect(() => {
    if (isActive) setShouldRender(true);
    else {
      const timer = setTimeout(() => setShouldRender(false), 300);
      return () => clearTimeout(timer);
    }
  }, [isActive]);

  useEffect(() => {
    if (isActive && stepRef.current) {
      const focusable = stepRef.current.querySelector(
        'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
      );
      if (focusable) focusable.focus();
    }
  }, [isActive]);

  if (!shouldRender) return null;

  const base =
    "top-0 left-0 w-full h-full transition-all duration-300 ease-in-out";
  const visibility = isActive ? "opacity-100" : "opacity-0 absolute";
  const transform = isActive
    ? "translate-x-0"
    : direction === "forward" || index < currentIndex
    ? "-translate-x-full"
    : "translate-x-full";

  return (
    <div
      ref={stepRef}
      className={cn(base, visibility, transform)}
      aria-hidden={!isActive}
    >
      {children}
    </div>
  );
}


--- END OF FILE: ui\multi-step-form.jsx ---

================================================================================


--- START OF FILE: ui\navigation-menu.jsx ---

import { cn } from "@/lib/utils"
import { forwardRef } from "react"
import { ChevronDown } from "lucide-react"
import { cva } from "class-variance-authority"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"


const NavigationMenu = forwardRef(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = forwardRef(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = forwardRef(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = forwardRef(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = forwardRef(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = forwardRef(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}


--- END OF FILE: ui\navigation-menu.jsx ---

================================================================================


--- START OF FILE: ui\pagination.jsx ---

import { cn } from "@/lib/utils";
import { forwardRef } from "react";
import {  buttonVariants } from "@/components/ui/button";
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react";

const Pagination = ({ className, ...props }) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
);
Pagination.displayName = "Pagination";

const PaginationContent = forwardRef(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
));
PaginationContent.displayName = "PaginationContent";

const PaginationItem = forwardRef(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
));
PaginationItem.displayName = "PaginationItem";

const PaginationLink = ({ className, isActive, size = "icon", ...props }) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
);
PaginationLink.displayName = "PaginationLink";

const PaginationPrevious = ({ className, ...props }) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
);
PaginationPrevious.displayName = "PaginationPrevious";

const PaginationNext = ({ className, ...props }) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
);
PaginationNext.displayName = "PaginationNext";

const PaginationEllipsis = ({ className, ...props }) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
);
PaginationEllipsis.displayName = "PaginationEllipsis";

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
};


--- END OF FILE: ui\pagination.jsx ---

================================================================================


--- START OF FILE: ui\popover.jsx ---

"use client";
import { cn } from "@/lib/utils";
import { forwardRef } from "react";
import * as PopoverPrimitive from "@radix-ui/react-popover";

const Popover = PopoverPrimitive.Root;

const PopoverTrigger = PopoverPrimitive.Trigger;

const PopoverContent = forwardRef(
  ({ className, align = "center", sideOffset = 4, ...props }, ref) => (
    <PopoverPrimitive.Portal>
      <PopoverPrimitive.Content
        ref={ref}
        align={align}
        sideOffset={sideOffset}
        className={cn(
          "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </PopoverPrimitive.Portal>
  )
);
PopoverContent.displayName = PopoverPrimitive.Content.displayName;

export { Popover, PopoverTrigger, PopoverContent };


--- END OF FILE: ui\popover.jsx ---

================================================================================


--- START OF FILE: ui\progress.jsx ---

"use client"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"
import { forwardRef } from "react"

const Progress = forwardRef(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }


--- END OF FILE: ui\progress.jsx ---

================================================================================


--- START OF FILE: ui\radio-group.jsx ---

"use client";
import { cn } from "@/lib/utils";
import { forwardRef } from "react";
import { Circle } from "lucide-react";
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group";

const RadioGroup = forwardRef(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  );
});
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName;

const RadioGroupItem = forwardRef(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  );
});
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName;

export { RadioGroup, RadioGroupItem };


--- END OF FILE: ui\radio-group.jsx ---

================================================================================


--- START OF FILE: ui\resizable.jsx ---

"use client";

import { cn } from "@/lib/utils";
import { GripVertical } from "lucide-react";
import * as ResizablePrimitive from "react-resizable-panels";

const ResizablePanelGroup = ({ className, ...props }) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
);

const ResizablePanel = ResizablePrimitive.Panel;

const ResizableHandle = ({ withHandle, className, ...props }) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
);

export { ResizablePanelGroup, ResizablePanel, ResizableHandle };


--- END OF FILE: ui\resizable.jsx ---

================================================================================


--- START OF FILE: ui\scroll-area.jsx ---

"use client";
import { cn } from "@/lib/utils";
import { forwardRef } from "react";
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area";


const ScrollArea = forwardRef(
  ({ className, children, ...props }, ref) => (
    <ScrollAreaPrimitive.Root
      ref={ref}
      className={cn("relative overflow-hidden", className)}
      {...props}
    >
      <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
        {children}
      </ScrollAreaPrimitive.Viewport>
      <ScrollBar />
      <ScrollAreaPrimitive.Corner />
    </ScrollAreaPrimitive.Root>
  )
);
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName;

const ScrollBar = forwardRef(
  ({ className, orientation = "vertical", ...props }, ref) => (
    <ScrollAreaPrimitive.ScrollAreaScrollbar
      ref={ref}
      orientation={orientation}
      className={cn(
        "flex touch-none select-none transition-colors",
        orientation === "vertical" &&
          "h-full w-2.5 border-l border-l-transparent p-[1px]",
        orientation === "horizontal" &&
          "h-2.5 flex-col border-t border-t-transparent p-[1px]",
        className
      )}
      {...props}
    >
      <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
    </ScrollAreaPrimitive.ScrollAreaScrollbar>
  )
);
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName;

export { ScrollArea, ScrollBar };


--- END OF FILE: ui\scroll-area.jsx ---

================================================================================


--- START OF FILE: ui\select.jsx ---

"use client";
import { cn } from "@/lib/utils";
import { forwardRef } from "react";
import * as SelectPrimitive from "@radix-ui/react-select";
import { Check, ChevronDown, ChevronUp } from "lucide-react";

const Select = SelectPrimitive.Root;

const SelectGroup = SelectPrimitive.Group;

const SelectValue = SelectPrimitive.Value;

const SelectTrigger = forwardRef(
  ({ className, children, ...props }, ref) => (
    <SelectPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
        className
      )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDown className="h-4 w-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  )
);
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName;

const SelectScrollUpButton = forwardRef(
  ({ className, ...props }, ref) => (
    <SelectPrimitive.ScrollUpButton
      ref={ref}
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronUp className="h-4 w-4" />
    </SelectPrimitive.ScrollUpButton>
  )
);
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;

const SelectScrollDownButton = forwardRef(
  ({ className, ...props }, ref) => (
    <SelectPrimitive.ScrollDownButton
      ref={ref}
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronDown className="h-4 w-4" />
    </SelectPrimitive.ScrollDownButton>
  )
);
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName;

const SelectContent = forwardRef(
  ({ className, children, position = "popper", ...props }, ref) => (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        ref={ref}
        className={cn(
          "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className
        )}
        position={position}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            "p-1",
            position === "popper" &&
              "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  )
);
SelectContent.displayName = SelectPrimitive.Content.displayName;

const SelectLabel = forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
));
SelectLabel.displayName = SelectPrimitive.Label.displayName;

const SelectItem = forwardRef(
  ({ className, children, ...props }, ref) => (
    <SelectPrimitive.Item
      ref={ref}
      className={cn(
        "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
        className
      )}
      {...props}
    >
      <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <Check className="h-4 w-4" />
        </SelectPrimitive.ItemIndicator>
      </span>

      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  )
);
SelectItem.displayName = SelectPrimitive.Item.displayName;

const SelectSeparator = forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
));
SelectSeparator.displayName = SelectPrimitive.Separator.displayName;

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
};


--- END OF FILE: ui\select.jsx ---

================================================================================


--- START OF FILE: ui\separator.jsx ---

"use client";
import { cn } from "@/lib/utils";
import { forwardRef } from "react";
import * as SeparatorPrimitive from "@radix-ui/react-separator";

const Separator = forwardRef(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
);
Separator.displayName = SeparatorPrimitive.Root.displayName;

export { Separator };


--- END OF FILE: ui\separator.jsx ---

================================================================================


--- START OF FILE: ui\sheet.jsx ---

"use client";
import { cn } from "@/lib/utils";
import { X } from "lucide-react";
import { forwardRef } from "react";
import { cva } from "class-variance-authority";
import * as SheetPrimitive from "@radix-ui/react-dialog";


const Sheet = SheetPrimitive.Root;

const SheetTrigger = SheetPrimitive.Trigger;

const SheetClose = SheetPrimitive.Close;

const SheetPortal = SheetPrimitive.Portal;

const SheetOverlay = forwardRef(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
));
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName;

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
);
const SheetContent = forwardRef(
  ({ side = "right", className, children, ...props }, ref) => (
    <SheetPortal>
      <SheetOverlay />
      <SheetPrimitive.Content
        ref={ref}
        className={cn(sheetVariants({ side }), className)}
        {...props}
      >
        {children}
        <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
          <X className="h-4 w-4" />
          <span className="sr-only">Close</span>
        </SheetPrimitive.Close>
      </SheetPrimitive.Content>
    </SheetPortal>
  )
);
SheetContent.displayName = SheetPrimitive.Content.displayName;

const SheetHeader = ({ className, ...props }) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
);
SheetHeader.displayName = "SheetHeader";

const SheetFooter = ({ className, ...props }) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
);
SheetFooter.displayName = "SheetFooter";

const SheetTitle = forwardRef(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
));
SheetTitle.displayName = SheetPrimitive.Title.displayName;

const SheetDescription = forwardRef(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
SheetDescription.displayName = SheetPrimitive.Description.displayName;

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
};


--- END OF FILE: ui\sheet.jsx ---

================================================================================


--- START OF FILE: ui\sidebar.jsx ---

"use client";
import { Slot } from "@radix-ui/react-slot";
import { cva } from "class-variance-authority";
import { PanelLeft } from "lucide-react";
import { useIsMobile } from "@/hooks/use-mobile";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Separator } from "@/components/ui/separator";
import { Sheet, SheetContent } from "@/components/ui/sheet";
import { Skeleton } from "@/components/ui/skeleton";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { forwardRef, useCallback, useContext, useState } from "react";

const SIDEBAR_COOKIE_NAME = "sidebar:state";
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;
const SIDEBAR_WIDTH = "16rem";
const SIDEBAR_WIDTH_MOBILE = "18rem";
const SIDEBAR_WIDTH_ICON = "3rem";
const SIDEBAR_KEYBOARD_SHORTCUT = "b";

const SidebarContext = createContext(null);

function useSidebar() {
  const context = useContext(SidebarContext);
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.");
  }

  return context;
}

const SidebarProvider = forwardRef(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile();
    const [openMobile, setOpenMobile] = useState(false);

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = useState(defaultOpen);
    const open = openProp ?? _open;
    const setOpen = useCallback(
      (value) => {
        const openState = typeof value === "function" ? value(open) : value;
        if (setOpenProp) {
          setOpenProp(openState);
        } else {
          _setOpen(openState);
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;
      },
      [setOpenProp, open]
    );

    // Helper to toggle the sidebar.
    const toggleSidebar = useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open);
    }, [isMobile, setOpen, setOpenMobile]);

    // Adds a keyboard shortcut to toggle the sidebar.
    useEffect(() => {
      const handleKeyDown = (event) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault();
          toggleSidebar();
        }
      };

      window.addEventListener("keydown", handleKeyDown);
      return () => window.removeEventListener("keydown", handleKeyDown);
    }, [toggleSidebar]);

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed";

    const contextValue =
      useMemo <
      SidebarContext >
      (() => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      ]);

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={{
              "--sidebar-width": SIDEBAR_WIDTH,
              "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
              ...style,
            }}
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    );
  }
);
SidebarProvider.displayName = "SidebarProvider";

const Sidebar = forwardRef(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar();

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      );
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={{
              "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
            }}
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      );
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    );
  }
);
Sidebar.displayName = "Sidebar";

const SidebarTrigger = forwardRef(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar();

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event);
        toggleSidebar();
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  );
});
SidebarTrigger.displayName = "SidebarTrigger";

const SidebarRail = forwardRef(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar();

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  );
});
SidebarRail.displayName = "SidebarRail";

const SidebarInset = forwardRef(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  );
});
SidebarInset.displayName = "SidebarInset";

const SidebarInput = forwardRef(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  );
});
SidebarInput.displayName = "SidebarInput";

const SidebarHeader = forwardRef(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  );
});
SidebarHeader.displayName = "SidebarHeader";

const SidebarFooter = forwardRef(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  );
});
SidebarFooter.displayName = "SidebarFooter";

const SidebarSeparator = forwardRef(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  );
});
SidebarSeparator.displayName = "SidebarSeparator";

const SidebarContent = forwardRef(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  );
});
SidebarContent.displayName = "SidebarContent";

const SidebarGroup = forwardRef(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  );
});
SidebarGroup.displayName = "SidebarGroup";

const SidebarGroupLabel = forwardRef(
  ({ className, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "div";

    return (
      <Comp
        ref={ref}
        data-sidebar="group-action"
        className={cn(
          "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
          // Increases the hit area of the button on mobile.
          "after:absolute after:-inset-2 after:md:hidden",
          "group-data-[collapsible=icon]:hidden",
          className
        )}
        {...props}
      />
    );
  }
);
SidebarGroupAction.displayName = "SidebarGroupAction";

const SidebarGroupContent = forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
));
SidebarGroupContent.displayName = "SidebarGroupContent";

const SidebarMenu = forwardRef(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
));
SidebarMenu.displayName = "SidebarMenu";

const SidebarMenuItem = forwardRef(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
));
SidebarMenuItem.displayName = "SidebarMenuItem";

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

const SidebarMenuButton = forwardRef(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button";
    const { isMobile, state } = useSidebar();

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    );

    if (!tooltip) {
      return button;
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      };
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    );
  }
);
SidebarMenuButton.displayName = "SidebarMenuButton";

const SidebarMenuAction = forwardRef(
  ({ className, asChild = false, showOnHover = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";

    return (
      <Comp
        ref={ref}
        data-sidebar="menu-action"
        className={cn(
          "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
          // Increases the hit area of the button on mobile.
          "after:absolute after:-inset-2 after:md:hidden",
          "peer-data-[size=sm]/menu-button:top-1",
          "peer-data-[size=default]/menu-button:top-1.5",
          "peer-data-[size=lg]/menu-button:top-2.5",
          "group-data-[collapsible=icon]:hidden",
          showOnHover &&
            "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
          className
        )}
        {...props}
      />
    );
  }
);
SidebarMenuAction.displayName = "SidebarMenuAction";
const SidebarMenuBadge = forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
));
SidebarMenuBadge.displayName = "SidebarMenuBadge";

const SidebarMenuSkeleton = forwardRef(
  ({ className, showIcon = false, ...props }, ref) => {
    // Random width between 50 to 90%.
    const width = useMemo(() => {
      return `${Math.floor(Math.random() * 40) + 50}%`;
    }, []);

    return (
      <div
        ref={ref}
        data-sidebar="menu-skeleton"
        className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
        {...props}
      >
        {showIcon && (
          <Skeleton
            className="size-4 rounded-md"
            data-sidebar="menu-skeleton-icon"
          />
        )}
        <Skeleton
          className="h-4 flex-1 max-w-[--skeleton-width]"
          data-sidebar="menu-skeleton-text"
          style={{
            "--skeleton-width": width,
          }}
        />
      </div>
    );
  }
);
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton";

const SidebarMenuSub = forwardRef(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
));
SidebarMenuSub.displayName = "SidebarMenuSub";

const SidebarMenuSubItem = forwardRef(({ ...props }, ref) => (
  <li ref={ref} {...props} />
));
SidebarMenuSubItem.displayName = "SidebarMenuSubItem";

const SidebarMenuSubButton = forwardRef(
  ({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
    const Comp = asChild ? Slot : "a";

    return (
      <Comp
        ref={ref}
        data-sidebar="menu-sub-button"
        data-size={size}
        data-active={isActive}
        className={cn(
          "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
          "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
          size === "sm" && "text-xs",
          size === "md" && "text-sm",
          "group-data-[collapsible=icon]:hidden",
          className
        )}
        {...props}
      />
    );
  }
);
SidebarMenuSubButton.displayName = "SidebarMenuSubButton";

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
};


--- END OF FILE: ui\sidebar.jsx ---

================================================================================


--- START OF FILE: ui\skeleton.Jsx ---

import { cn } from "@/lib/utils";
function Skeleton({ className, ...props }) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  );
}

export { Skeleton };


--- END OF FILE: ui\skeleton.Jsx ---

================================================================================


--- START OF FILE: ui\sonner.jsx ---

"use client";
import { useTheme } from "next-themes";
import { Toaster as Sonner } from "sonner";

const Toaster = ({ ...props }) => {
  const { theme = "system" } = useTheme();

  return (
    <Sonner
      theme={theme}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  );
};

export { Toaster };


--- END OF FILE: ui\sonner.jsx ---

================================================================================


--- START OF FILE: ui\switch.jsx ---

"use client"
import { cn } from "@/lib/utils"
import { forwardRef } from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"


const Switch = forwardRef(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }


--- END OF FILE: ui\switch.jsx ---

================================================================================


--- START OF FILE: ui\table.jsx ---

import { cn } from "@/lib/utils";
import { forwardRef } from "react";

const Table = forwardRef(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
));
Table.displayName = "Table";

const TableHeader = forwardRef(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
));
TableHeader.displayName = "TableHeader";

const TableBody = forwardRef(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
));
TableBody.displayName = "TableBody";

const TableFooter = forwardRef(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
));
TableFooter.displayName = "TableFooter";

const TableRow = forwardRef(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
));
TableRow.displayName = "TableRow";

const TableHead = forwardRef(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
));
TableHead.displayName = "TableHead";

const TableCell = forwardRef(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
));
TableCell.displayName = "TableCell";

const TableCaption = forwardRef(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
));
TableCaption.displayName = "TableCaption";

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
};


--- END OF FILE: ui\table.jsx ---

================================================================================


--- START OF FILE: ui\tabs.jsx ---

"use client";
import { cn } from "@/lib/utils";
import { forwardRef } from "react";
import * as TabsPrimitive from "@radix-ui/react-tabs";

const Tabs = TabsPrimitive.Root;

const TabsList = forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
));
TabsList.displayName = TabsPrimitive.List.displayName;

const TabsTrigger = forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
));
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName;

const TabsContent = forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
));
TabsContent.displayName = TabsPrimitive.Content.displayName;

export { Tabs, TabsList, TabsTrigger, TabsContent };


--- END OF FILE: ui\tabs.jsx ---

================================================================================


--- START OF FILE: ui\textarea.jsx ---

import { cn } from "@/lib/utils";
import { forwardRef } from "react";

const Textarea = forwardRef(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props}
    />
  );
});
Textarea.displayName = "Textarea";

export { Textarea };


--- END OF FILE: ui\textarea.jsx ---

================================================================================


--- START OF FILE: ui\toggle-group.jsx ---

"use client"
import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"
import { createContext, forwardRef, useContext } from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"

const ToggleGroupContext = createContext({
  size: "default",
  variant: "default",
})

const ToggleGroup = forwardRef(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = forwardRef(({ className, children, variant, size, ...props }, ref) => {
  const context = useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }


--- END OF FILE: ui\toggle-group.jsx ---

================================================================================


--- START OF FILE: ui\toggle.jsx ---

"use client";
import { cn } from "@/lib/utils";
import { forwardRef } from "react";
import * as TogglePrimitive from "@radix-ui/react-toggle";
import { cva } from "class-variance-authority";

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2",
  {
    variants: {
      variant: {
        default:
          "bg-transparent text-foreground hover:bg-muted hover:text-muted-foreground",
        outline:
          "border border-border text-foreground bg-transparent hover:bg-muted hover:text-muted-foreground",
        blue: "border border-border text-foreground data-[state=on]:bg-blue-600 data-[state=on]:text-white",
      },
      size: {
        default: "h-10 px-3 min-w-10",
        sm: "h-9 px-2.5 min-w-9",
        lg: "h-11 px-5 min-w-11",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

const Toggle = forwardRef(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
));

Toggle.displayName = TogglePrimitive.Root.displayName;

export { Toggle, toggleVariants };


--- END OF FILE: ui\toggle.jsx ---

================================================================================


--- START OF FILE: ui\tooltip.jsx ---

"use client";
import { cn } from "@/lib/utils";
import { forwardRef } from "react";
import * as TooltipPrimitive from "@radix-ui/react-tooltip";

const TooltipProvider = TooltipPrimitive.Provider;

const Tooltip = TooltipPrimitive.Root;

const TooltipTrigger = TooltipPrimitive.Trigger;

const TooltipContent = forwardRef(
  ({ className, sideOffset = 4, ...props }, ref) => (
    <TooltipPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  )
);
TooltipContent.displayName = TooltipPrimitive.Content.displayName;

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };


--- END OF FILE: ui\tooltip.jsx ---

================================================================================

